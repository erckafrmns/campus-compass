//'yarn run dev' to run 
import { getMapData, show3dMap, Coordinate, Space} from "@mappedin/mappedin-js";
import "@mappedin/mappedin-js/lib/index.css";
import "./style.css";  

const options = {
    key: "65e748ae789fb8fd13e8c68e",
    secret: "b21762cae28feaa8331f654f019e21f3beb960d0f63b4192fca0932492d12e52",
    mapId: "65e0132da1cbc80d8a98eb45"
};  

async function init() { 
    let searchHistory: SearchEntry[] = [];  

    interface SearchEntry {
        origin: string;
        arrival: string;
        timestamp: number; 
    } 
    let destinationInput: HTMLInputElement; 
    let originInput: HTMLInputElement;


    const loadingScreen = document.createElement("div");
    loadingScreen.setAttribute("id", "loading-screen");
    loadingScreen.innerHTML = "<img id='loading-icon' src='./src/assets/icon1.png' alt='Loading...' />";
    document.body.appendChild(loadingScreen);

    const icon = `<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="1500px" height="1500px" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" xmlns:xlink="http://www.w3.org/1999/xlink">
<g><path style="opacity:0.982" fill="#c41e3a" d="M 1378.5,630.5 C 1377.41,630.62 1376.75,631.287 1376.5,632.5C 1376.75,633.713 1377.41,634.38 1378.5,634.5C 1382.01,650.248 1384.35,666.248 1385.5,682.5C 1388.52,682.335 1391.52,682.502 1394.5,683C 1420.67,689.142 1447,694.308 1473.5,698.5C 1473.5,735.5 1473.5,772.5 1473.5,809.5C 1443.61,815.823 1413.61,821.823 1383.5,827.5C 1381.26,853.569 1376.59,878.902 1369.5,903.5C 1368.41,903.62 1367.75,904.287 1367.5,905.5C 1367.54,906.416 1367.88,907.083 1368.5,907.5C 1367.09,913.982 1365.59,920.315 1364,926.5C 1388.58,943.414 1413.41,959.914 1438.5,976C 1439.08,976.893 1439.41,977.893 1439.5,979C 1426.09,1012.17 1412.75,1045.34 1399.5,1078.5C 1368.9,1073.53 1338.4,1067.86 1308,1061.5C 1289.41,1092.46 1268.91,1122.29 1246.5,1151C 1263.13,1175.77 1279.63,1200.6 1296,1225.5C 1296.67,1226.83 1296.67,1228.17 1296,1229.5C 1271.11,1254.39 1246.28,1279.22 1221.5,1304C 1220.5,1304.67 1219.5,1304.67 1218.5,1304C 1193.34,1286.92 1168.01,1270.09 1142.5,1253.5C 1116.4,1273.94 1088.73,1291.94 1059.5,1307.5C 1063.88,1334.66 1069.05,1361.66 1075,1388.5C 1075.41,1391.68 1075.91,1394.85 1076.5,1398C 1076.41,1399.11 1076.08,1400.11 1075.5,1401C 1043.09,1414.48 1010.59,1427.98 978,1441.5C 975.931,1440.73 974.265,1439.4 973,1437.5C 956.838,1413.85 940.672,1390.18 924.5,1366.5C 922.235,1365.35 919.902,1365.19 917.5,1366C 887.5,1374.58 856.833,1380.58 825.5,1384C 824.128,1384.4 822.795,1384.9 821.5,1385.5C 815.041,1414.7 809.041,1444.03 803.5,1473.5C 766.5,1473.5 729.5,1473.5 692.5,1473.5C 687.555,1444.67 681.555,1416.17 674.5,1388C 675.791,1385.91 675.124,1384.58 672.5,1384C 640.114,1380.48 608.28,1374.31 577,1365.5C 574.931,1366.27 573.265,1367.6 572,1369.5C 556.697,1392.81 541.364,1416.15 526,1439.5C 525.044,1440.89 523.711,1441.56 522,1441.5C 489.111,1428.3 456.444,1414.97 424,1401.5C 423.333,1398.83 423.333,1396.17 424,1393.5C 429.611,1366.48 434.777,1339.31 439.5,1312C 439.561,1310.29 438.894,1308.96 437.5,1308C 406.753,1290.93 377.587,1271.43 350,1249.5C 324.323,1266.52 298.656,1283.52 273,1300.5C 247.922,1275.38 222.755,1250.38 197.5,1225.5C 196.167,1223.83 196.167,1222.17 197.5,1220.5C 213.781,1195.87 230.115,1171.2 246.5,1146.5C 225.947,1119.88 207.28,1092.05 190.5,1063C 160.347,1069.53 130.013,1075.36 99.5,1080.5C 85.952,1047.37 72.2853,1014.21 58.5,981C 83.0275,963.478 107.861,946.312 133,929.5C 133.167,928.5 133.333,927.5 133.5,926.5C 123.346,894.366 116.68,861.366 113.5,827.5C 83.8304,821.582 54.1638,815.582 24.5,809.5C 24.1668,772.827 24.5001,736.161 25.5,699.5C 54.1676,693.833 82.8343,688.166 111.5,682.5C 114.564,648.143 120.898,614.643 130.5,582C 105.999,565.916 81.6657,549.583 57.5,533C 56.2068,532.51 54.8734,532.343 53.5,532.5C 53.3379,530.473 53.5045,528.473 54,526.5C 67.0154,494.774 80.182,463.107 93.5,431.5C 97.122,430.341 100.789,430.175 104.5,431C 130.949,436.634 157.615,441.801 184.5,446.5C 201.225,413.905 220.892,383.072 243.5,354C 226.564,328.78 209.897,303.447 193.5,278C 218.27,251.896 243.77,226.396 270,201.5C 295.469,217.183 320.636,233.516 345.5,250.5C 372.493,229.673 400.493,210.34 429.5,192.5C 423.292,162.695 417.625,132.695 412.5,102.5C 445.553,88.9854 478.553,75.3187 511.5,61.5C 513.088,62.0096 514.255,63.0096 515,64.5C 531.097,88.3707 547.43,112.037 564,135.5C 571.71,132.753 579.544,130.253 587.5,128C 597.59,125.942 607.59,123.608 617.5,121C 636.536,117.701 655.536,114.534 674.5,111.5C 681.198,82.9803 687.532,54.3136 693.5,25.5C 730.161,24.5001 766.827,24.1668 803.5,24.5C 803.336,27.1873 803.503,29.854 804,32.5C 809.83,58.8437 815.33,85.1771 820.5,111.5C 836.759,114.261 853.092,116.761 869.5,119C 886.326,122.476 902.993,126.643 919.5,131.5C 935.213,109.271 950.38,86.604 965,63.5C 966.87,60.426 969.203,57.7594 972,55.5C 1005.16,69.228 1038.32,82.5613 1071.5,95.5C 1066.97,124.968 1061.63,154.301 1055.5,183.5C 1055.57,184.772 1055.9,185.938 1056.5,187C 1071.98,195.907 1087.31,205.074 1102.5,214.5C 1117.46,224.792 1132.12,235.459 1146.5,246.5C 1171.85,230.495 1196.85,213.995 1221.5,197C 1222.5,196.333 1223.5,196.333 1224.5,197C 1249.35,222.014 1274.35,246.847 1299.5,271.5C 1300.58,272.365 1300.75,273.365 1300,274.5C 1283.05,299.552 1266.22,324.718 1249.5,350C 1270.78,376.713 1289.94,404.88 1307,434.5C 1336.38,428.025 1365.72,421.691 1395,415.5C 1396.26,415.759 1397.26,416.426 1398,417.5C 1412.3,449.925 1425.8,482.591 1438.5,515.5C 1437.19,517.473 1435.53,519.139 1433.5,520.5C 1409.93,535.906 1386.76,551.906 1364,568.5C 1368.56,589.228 1373.39,609.895 1378.5,630.5 Z"/></g>
<g><path style="opacity:0.992" fill="#cc465b" d="M 810.5,222.5 C 800.198,221.48 789.864,220.813 779.5,220.5C 779.167,220.5 778.833,220.5 778.5,220.5C 754.323,219.244 729.99,219.244 705.5,220.5C 706.952,219.698 708.618,219.198 710.5,219C 737.833,218.333 765.167,218.333 792.5,219C 798.849,219.692 804.849,220.858 810.5,222.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dea3ad" d="M 778.5,220.5 C 753.491,220.348 728.491,220.681 703.5,221.5C 703.842,220.662 704.508,220.328 705.5,220.5C 729.99,219.244 754.323,219.244 778.5,220.5 Z"/></g>
<g><path style="opacity:0.996" fill="#e0acb4" d="M 702.5,221.5 C 697.731,222.889 692.731,223.556 687.5,223.5C 692.269,222.111 697.269,221.444 702.5,221.5 Z"/></g>
<g><path style="opacity:1" fill="#ebebeb" d="M 778.5,220.5 C 778.833,220.5 779.167,220.5 779.5,220.5C 789.958,222.158 800.625,223.158 811.5,223.5C 824.588,224.513 837.588,226.179 850.5,228.5C 852.102,230.074 854.102,230.741 856.5,230.5C 857.5,230.5 858.5,230.5 859.5,230.5C 861.515,231.924 863.848,232.59 866.5,232.5C 868.903,232.448 871.236,232.781 873.5,233.5C 876.907,235.074 880.573,236.074 884.5,236.5C 894.374,239.561 904.374,242.561 914.5,245.5C 914.611,246.117 914.944,246.617 915.5,247C 917.866,247.44 920.199,247.94 922.5,248.5C 928.266,249.911 933.932,251.744 939.5,254C 951.585,259.96 963.918,265.127 976.5,269.5C 980.808,273.284 985.808,275.951 991.5,277.5C 1022.78,294.763 1052.78,314.096 1081.5,335.5C 1083.24,338.243 1085.57,340.243 1088.5,341.5C 1089.91,343.914 1091.91,345.581 1094.5,346.5C 1096.55,349.55 1099.22,351.883 1102.5,353.5C 1105.23,357.234 1108.56,360.234 1112.5,362.5C 1121.5,371.833 1130.5,381.167 1139.5,390.5C 1140.08,392.749 1141.41,394.415 1143.5,395.5C 1145.43,399.1 1148.1,402.1 1151.5,404.5C 1155.63,407.29 1158.63,410.957 1160.5,415.5C 1161.42,418.089 1163.09,420.089 1165.5,421.5C 1167.26,422.262 1168.26,423.596 1168.5,425.5C 1169.08,427.749 1170.41,429.415 1172.5,430.5C 1178.66,436.659 1183.66,443.659 1187.5,451.5C 1188.39,455.833 1190.72,459.166 1194.5,461.5C 1200.93,470.991 1206.93,480.991 1212.5,491.5C 1212.72,494.546 1214.06,496.879 1216.5,498.5C 1216.75,500.967 1217.75,502.967 1219.5,504.5C 1221.31,509.254 1223.31,513.92 1225.5,518.5C 1225.67,519.822 1225.34,520.989 1224.5,522C 1225.19,523.067 1225.69,524.234 1226,525.5C 1228.13,526.255 1229.8,527.588 1231,529.5C 1232.12,533.594 1232.79,537.594 1233,541.5C 1233.33,540.5 1233.67,539.5 1234,538.5C 1234.6,540.91 1235.77,542.91 1237.5,544.5C 1237.68,546.591 1237.35,548.591 1236.5,550.5C 1237.53,550.554 1238.7,550.888 1240,551.5C 1240.58,554.53 1241.74,557.197 1243.5,559.5C 1244.07,561.42 1245.07,563.087 1246.5,564.5C 1252.63,580.773 1257.63,597.439 1261.5,614.5C 1261.41,617.152 1262.08,619.485 1263.5,621.5C 1264.45,622.919 1264.78,624.585 1264.5,626.5C 1264.41,629.152 1265.08,631.485 1266.5,633.5C 1266.5,634.167 1266.5,634.833 1266.5,635.5C 1266.26,637.898 1266.93,639.898 1268.5,641.5C 1268.5,642.167 1268.5,642.833 1268.5,643.5C 1268.6,648.936 1269.6,653.936 1271.5,658.5C 1272.48,661.287 1272.81,664.287 1272.5,667.5C 1272.58,674.435 1273.58,681.101 1275.5,687.5C 1275.5,688.167 1275.5,688.833 1275.5,689.5C 1275.42,693.215 1275.76,696.881 1276.5,700.5C 1277.27,725.492 1277.61,750.492 1277.5,775.5C 1277.5,777.167 1277.5,778.833 1277.5,780.5C 1276.35,787.309 1275.68,794.309 1275.5,801.5C 1275.5,804.167 1275.5,806.833 1275.5,809.5C 1273.95,813.567 1273.28,817.9 1273.5,822.5C 1272.5,830.5 1271.5,838.5 1270.5,846.5C 1268.79,847.635 1268.12,849.302 1268.5,851.5C 1268.5,852.5 1268.5,853.5 1268.5,854.5C 1266.88,857.171 1266.22,860.171 1266.5,863.5C 1264.79,864.635 1264.12,866.302 1264.5,868.5C 1264.5,869.5 1264.5,870.5 1264.5,871.5C 1263.21,872.058 1262.38,873.058 1262,874.5C 1260.01,881.068 1258.51,887.735 1257.5,894.5C 1256.14,899.018 1255.14,903.685 1254.5,908.5C 1252.77,912.697 1251.43,917.031 1250.5,921.5C 1248.49,925.032 1246.65,928.699 1245,932.5C 1243.87,935.445 1243.04,938.445 1242.5,941.5C 1240.53,947.399 1238.2,953.066 1235.5,958.5C 1233.75,960.033 1232.75,962.033 1232.5,964.5C 1231.64,966.421 1230.97,968.421 1230.5,970.5C 1229.07,971.903 1227.9,973.569 1227,975.5C 1226.51,976.793 1226.34,978.127 1226.5,979.5C 1222.44,984.1 1219.44,989.434 1217.5,995.5C 1216.33,996.514 1215.66,997.847 1215.5,999.5C 1211.28,1005.44 1207.62,1011.77 1204.5,1018.5C 1202.8,1020.57 1201.47,1022.9 1200.5,1025.5C 1198.34,1027.82 1196.67,1030.49 1195.5,1033.5C 1193.05,1035.63 1191.38,1038.3 1190.5,1041.5C 1188.67,1043.15 1187.34,1045.15 1186.5,1047.5C 1183.4,1050.27 1181.06,1053.61 1179.5,1057.5C 1176.53,1059.44 1174.53,1062.11 1173.5,1065.5C 1171.41,1066.58 1170.08,1068.25 1169.5,1070.5C 1168.09,1070.97 1167.43,1071.97 1167.5,1073.5C 1163.87,1076.09 1161.21,1079.43 1159.5,1083.5C 1152.43,1090.24 1146.09,1097.57 1140.5,1105.5C 1128.5,1116.83 1116.83,1128.5 1105.5,1140.5C 1094.97,1148.93 1084.64,1157.6 1074.5,1166.5C 1068.96,1169.44 1063.96,1173.1 1059.5,1177.5C 1053.81,1180.68 1048.48,1184.34 1043.5,1188.5C 1039.32,1190.09 1035.65,1192.42 1032.5,1195.5C 1030.97,1195.43 1029.97,1196.09 1029.5,1197.5C 1025.13,1199.35 1021.13,1201.68 1017.5,1204.5C 1013.13,1206.35 1009.13,1208.68 1005.5,1211.5C 1001.35,1212.76 997.686,1214.76 994.5,1217.5C 992.938,1217.73 991.605,1218.4 990.5,1219.5C 985.517,1220.91 981.184,1223.25 977.5,1226.5C 976.833,1226.5 976.167,1226.5 975.5,1226.5C 971.696,1228.27 967.696,1229.61 963.5,1230.5C 960.835,1229.11 959.835,1230.11 960.5,1233.5C 958.62,1233.23 957.287,1233.9 956.5,1235.5C 954.315,1235.7 952.315,1236.37 950.5,1237.5C 947.728,1237.76 945.395,1238.76 943.5,1240.5C 940.422,1240.62 937.755,1241.62 935.5,1243.5C 935.5,1244.17 935.167,1244.5 934.5,1244.5C 930.446,1244.51 927.113,1245.84 924.5,1248.5C 919.052,1249.76 913.718,1251.43 908.5,1253.5C 903.607,1254.41 898.94,1255.75 894.5,1257.5C 890.231,1258.7 885.897,1259.7 881.5,1260.5C 874.105,1261.5 867.105,1263.5 860.5,1266.5C 857.098,1266.34 853.764,1266.68 850.5,1267.5C 847.482,1267.34 844.482,1267.5 841.5,1268C 840.584,1268.28 839.918,1268.78 839.5,1269.5C 839.167,1269.5 838.833,1269.5 838.5,1269.5C 832.188,1270.36 825.855,1271.19 819.5,1272C 818.584,1272.28 817.918,1272.78 817.5,1273.5C 817.167,1273.5 816.833,1273.5 816.5,1273.5C 810.824,1273.33 805.157,1273.5 799.5,1274C 797.618,1274.2 795.952,1274.7 794.5,1275.5C 793.167,1275.5 791.833,1275.5 790.5,1275.5C 785.473,1275.5 780.473,1275.84 775.5,1276.5C 752.818,1276.74 730.151,1276.41 707.5,1275.5C 706.167,1275.5 704.833,1275.5 703.5,1275.5C 699.433,1273.95 695.1,1273.28 690.5,1273.5C 686.102,1273.71 681.768,1273.37 677.5,1272.5C 673.79,1270.86 669.79,1270.2 665.5,1270.5C 665.167,1270.5 664.833,1270.5 664.5,1270.5C 661.373,1269.42 658.04,1268.75 654.5,1268.5C 652.166,1267.88 649.833,1267.04 647.5,1266C 644.518,1265.5 641.518,1265.34 638.5,1265.5C 637.081,1264.55 635.415,1264.22 633.5,1264.5C 630.962,1263.07 628.295,1261.73 625.5,1260.5C 621.893,1259.51 618.226,1259.18 614.5,1259.5C 614.167,1259.5 613.833,1259.5 613.5,1259.5C 612.4,1258.44 611.066,1257.61 609.5,1257C 602.471,1255.23 595.471,1253.39 588.5,1251.5C 585.834,1251.07 583.168,1250.57 580.5,1250C 575.027,1247.38 569.36,1245.21 563.5,1243.5C 555.846,1240.72 548.18,1237.72 540.5,1234.5C 539.833,1234.17 539.167,1233.83 538.5,1233.5C 534.871,1230.19 530.538,1228.19 525.5,1227.5C 525.158,1226.66 524.492,1226.33 523.5,1226.5C 519.298,1223.42 514.632,1221.09 509.5,1219.5C 508.167,1218.83 506.833,1218.17 505.5,1217.5C 503.967,1215.75 501.967,1214.75 499.5,1214.5C 497.879,1212.06 495.546,1210.72 492.5,1210.5C 488.5,1208.17 484.5,1205.83 480.5,1203.5C 479.699,1201.96 479.366,1200.29 479.5,1198.5C 466.62,1191.47 454.287,1183.47 442.5,1174.5C 440.958,1173.25 439.458,1173.25 438,1174.5C 437.184,1173.18 436.017,1172.51 434.5,1172.5C 423.109,1164.62 412.109,1156.12 401.5,1147C 389.328,1135.66 377.328,1124.16 365.5,1112.5C 362.899,1108.23 359.566,1104.56 355.5,1101.5C 344.571,1087.39 333.404,1073.39 322,1059.5C 311.604,1044.66 301.77,1029.66 292.5,1014.5C 291.532,1011.9 290.199,1009.57 288.5,1007.5C 288.245,1005.03 287.245,1003.03 285.5,1001.5C 284.241,997.353 282.241,993.686 279.5,990.5C 278.833,989.167 278.167,987.833 277.5,986.5C 274.262,977.779 270.262,969.445 265.5,961.5C 265.657,960.127 265.49,958.793 265,957.5C 263.627,954.061 261.793,951.061 259.5,948.5C 255.223,937.668 251.556,926.668 248.5,915.5C 246.339,906.758 244.839,898.091 244,889.5C 241.663,887.458 239.83,885.124 238.5,882.5C 236.622,876.576 234.955,870.576 233.5,864.5C 233.768,862.901 233.434,861.568 232.5,860.5C 230.702,851.915 229.369,843.249 228.5,834.5C 227.911,829.519 227.411,824.519 227,819.5C 226.722,818.584 226.222,817.918 225.5,817.5C 224.947,812.518 224.613,807.518 224.5,802.5C 222.22,768.217 221.886,733.883 223.5,699.5C 223.916,694.507 224.249,689.507 224.5,684.5C 224.5,684.167 224.5,683.833 224.5,683.5C 226.136,679.79 226.802,675.79 226.5,671.5C 226.5,670.833 226.5,670.167 226.5,669.5C 227.581,666.373 228.247,663.04 228.5,659.5C 228.5,658.167 228.5,656.833 228.5,655.5C 229.924,653.485 230.59,651.152 230.5,648.5C 230.871,643.022 231.871,637.688 233.5,632.5C 234.924,630.485 235.59,628.152 235.5,625.5C 236.924,623.485 237.59,621.152 237.5,618.5C 238.41,616.981 239.243,615.315 240,613.5C 241.613,607.938 242.779,602.271 243.5,596.5C 249.026,576.912 255.693,557.912 263.5,539.5C 265.245,537.967 266.245,535.967 266.5,533.5C 267.986,528.365 270.32,523.698 273.5,519.5C 275.195,517.103 276.528,514.437 277.5,511.5C 279.977,505.875 282.477,500.208 285,494.5C 287.114,491.907 288.947,489.24 290.5,486.5C 292.245,484.967 293.245,482.967 293.5,480.5C 296.62,474.938 299.787,469.271 303,463.5C 304,462.833 305,462.167 306,461.5C 306.6,459.09 307.766,457.09 309.5,455.5C 311.822,454.198 313.155,452.198 313.5,449.5C 313.427,447.973 314.094,446.973 315.5,446.5C 317.167,446.5 318.833,446.5 320.5,446.5C 320.338,444.473 320.505,442.473 321,440.5C 322.421,438.595 323.588,436.595 324.5,434.5C 324.427,432.973 325.094,431.973 326.5,431.5C 329.556,429.051 331.889,426.051 333.5,422.5C 336.871,419.129 339.871,415.463 342.5,411.5C 344.587,410.415 345.92,408.749 346.5,406.5C 349.243,404.761 351.243,402.427 352.5,399.5C 352.833,398.5 353.5,397.833 354.5,397.5C 368.5,382.833 382.833,368.5 397.5,354.5C 403.135,350.199 408.468,345.533 413.5,340.5C 418.746,337.589 423.413,333.922 427.5,329.5C 430.064,325.883 433.397,323.216 437.5,321.5C 440.37,320.567 442.704,318.9 444.5,316.5C 446.179,316.108 447.846,315.608 449.5,315C 453.198,311.826 456.865,308.659 460.5,305.5C 463.894,302.779 467.561,300.446 471.5,298.5C 475.2,298.464 477.867,296.797 479.5,293.5C 484.132,292.186 488.132,289.853 491.5,286.5C 493.891,284.638 496.558,283.304 499.5,282.5C 501.967,282.245 503.967,281.245 505.5,279.5C 507.853,278.66 509.853,277.326 511.5,275.5C 511.833,275.5 512.167,275.5 512.5,275.5C 515.947,274.917 518.947,273.584 521.5,271.5C 524.798,269.017 528.465,267.351 532.5,266.5C 535.437,265.528 538.103,264.195 540.5,262.5C 543.145,260.69 546.145,259.69 549.5,259.5C 554.522,257.088 559.855,255.421 565.5,254.5C 567.807,253.508 569.807,252.175 571.5,250.5C 571.833,250.5 572.167,250.5 572.5,250.5C 574.967,250.245 576.967,249.245 578.5,247.5C 580.657,246.593 582.99,245.927 585.5,245.5C 589.649,244.369 593.649,243.035 597.5,241.5C 598.167,241.5 598.833,241.5 599.5,241.5C 603.533,240.975 607.2,239.642 610.5,237.5C 611.167,237.5 611.833,237.5 612.5,237.5C 619.493,236.603 626.159,234.937 632.5,232.5C 632.833,232.5 633.167,232.5 633.5,232.5C 636.152,232.59 638.485,231.924 640.5,230.5C 640.833,230.5 641.167,230.5 641.5,230.5C 644.152,230.59 646.485,229.924 648.5,228.5C 649.833,228.5 651.167,228.5 652.5,228.5C 660.791,228.08 668.791,226.747 676.5,224.5C 680.135,223.886 683.802,223.552 687.5,223.5C 692.731,223.556 697.731,222.889 702.5,221.5C 702.833,221.5 703.167,221.5 703.5,221.5C 728.491,220.681 753.491,220.348 778.5,220.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dfa7b0" d="M 779.5,220.5 C 789.864,220.813 800.198,221.48 810.5,222.5C 811.167,222.5 811.5,222.833 811.5,223.5C 800.625,223.158 789.958,222.158 779.5,220.5 Z"/></g>
<g><path style="opacity:1" fill="#dd9da7" d="M 676.5,224.5 C 668.791,226.747 660.791,228.08 652.5,228.5C 652.918,227.778 653.584,227.278 654.5,227C 661.779,225.62 669.112,224.786 676.5,224.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67c8b" d="M 648.5,228.5 C 646.485,229.924 644.152,230.59 641.5,230.5C 643.515,229.076 645.848,228.41 648.5,228.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d88593" d="M 850.5,228.5 C 852.898,228.259 854.898,228.926 856.5,230.5C 854.102,230.741 852.102,230.074 850.5,228.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db929e" d="M 640.5,230.5 C 638.485,231.924 636.152,232.59 633.5,232.5C 635.515,231.076 637.848,230.41 640.5,230.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d98694" d="M 859.5,230.5 C 862.152,230.41 864.485,231.076 866.5,232.5C 863.848,232.59 861.515,231.924 859.5,230.5 Z"/></g>
<g><path style="opacity:0.992" fill="#cf5666" d="M 873.5,233.5 C 877.658,233.12 881.325,234.12 884.5,236.5C 880.573,236.074 876.907,235.074 873.5,233.5 Z"/></g>
<g><path style="opacity:1" fill="#dd9da8" d="M 632.5,232.5 C 626.159,234.937 619.493,236.603 612.5,237.5C 618.77,234.726 625.436,233.06 632.5,232.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dd9aa3" d="M 610.5,237.5 C 607.2,239.642 603.533,240.975 599.5,241.5C 602.66,239 606.327,237.667 610.5,237.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d67583" d="M 597.5,241.5 C 593.649,243.035 589.649,244.369 585.5,245.5C 588.899,242.803 592.899,241.47 597.5,241.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db919d" d="M 914.5,245.5 C 916.801,246.06 919.134,246.56 921.5,247C 922.056,247.383 922.389,247.883 922.5,248.5C 920.199,247.94 917.866,247.44 915.5,247C 914.944,246.617 914.611,246.117 914.5,245.5 Z"/></g>
<g><path style="opacity:1" fill="#dea1ab" d="M 578.5,247.5 C 576.967,249.245 574.967,250.245 572.5,250.5C 574.033,248.755 576.033,247.755 578.5,247.5 Z"/></g>
<g><path style="opacity:1" fill="#e5c3c8" d="M 571.5,250.5 C 569.807,252.175 567.807,253.508 565.5,254.5C 559.855,255.421 554.522,257.088 549.5,259.5C 550.348,257.907 551.681,256.74 553.5,256C 559.64,254.467 565.64,252.634 571.5,250.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db8f9a" d="M 540.5,262.5 C 538.103,264.195 535.437,265.528 532.5,266.5C 534.434,263.942 537.101,262.609 540.5,262.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67887" d="M 976.5,269.5 C 981.76,271.799 986.76,274.466 991.5,277.5C 985.808,275.951 980.808,273.284 976.5,269.5 Z"/></g>
<g><path style="opacity:0.996" fill="#da8d99" d="M 521.5,271.5 C 518.947,273.584 515.947,274.917 512.5,275.5C 513.903,274.069 515.569,272.902 517.5,272C 518.793,271.51 520.127,271.343 521.5,271.5 Z"/></g>
<g><path style="opacity:0.996" fill="#da8d98" d="M 511.5,275.5 C 509.853,277.326 507.853,278.66 505.5,279.5C 506.802,277.178 508.802,275.845 511.5,275.5 Z"/></g>
<g><path style="opacity:1" fill="#dfa6b0" d="M 505.5,279.5 C 503.967,281.245 501.967,282.245 499.5,282.5C 501.033,280.755 503.033,279.755 505.5,279.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db909b" d="M 491.5,286.5 C 488.132,289.853 484.132,292.186 479.5,293.5C 483.131,290.679 487.131,288.346 491.5,286.5 Z"/></g>
<g><path style="opacity:1" fill="#e4bec3" d="M 479.5,293.5 C 477.867,296.797 475.2,298.464 471.5,298.5C 473.822,296.336 476.489,294.669 479.5,293.5 Z"/></g>
<g><path style="opacity:1" fill="#dfa2ac" d="M 460.5,305.5 C 456.865,308.659 453.198,311.826 449.5,315C 447.846,315.608 446.179,316.108 444.5,316.5C 449.278,312.06 454.612,308.393 460.5,305.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db94a0" d="M 444.5,316.5 C 442.704,318.9 440.37,320.567 437.5,321.5C 439.296,319.1 441.63,317.433 444.5,316.5 Z"/></g>
<g><path style="opacity:1" fill="#dfa9b1" d="M 427.5,329.5 C 423.413,333.922 418.746,337.589 413.5,340.5C 416.043,337.22 419.043,334.387 422.5,332C 424.078,330.906 425.745,330.072 427.5,329.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d36978" d="M 1081.5,335.5 C 1084.43,336.757 1086.76,338.757 1088.5,341.5C 1085.57,340.243 1083.24,338.243 1081.5,335.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d36777" d="M 1088.5,341.5 C 1091.09,342.419 1093.09,344.086 1094.5,346.5C 1091.91,345.581 1089.91,343.914 1088.5,341.5 Z"/></g>
<g><path style="opacity:0.996" fill="#e0aab3" d="M 413.5,340.5 C 408.468,345.533 403.135,350.199 397.5,354.5C 401.94,348.722 407.273,344.055 413.5,340.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d26272" d="M 1102.5,353.5 C 1106.44,355.766 1109.77,358.766 1112.5,362.5C 1108.56,360.234 1105.23,357.234 1102.5,353.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dfa5ae" d="M 397.5,354.5 C 382.833,368.5 368.5,382.833 354.5,397.5C 367.167,381.5 381.5,367.167 397.5,354.5 Z"/></g>
<g><path style="opacity:1" fill="#dfa2ab" d="M 1139.5,390.5 C 1141.59,391.585 1142.92,393.251 1143.5,395.5C 1141.41,394.415 1140.08,392.749 1139.5,390.5 Z"/></g>
<g><path style="opacity:1" fill="#e1b2b9" d="M 1143.5,395.5 C 1146.9,397.9 1149.57,400.9 1151.5,404.5C 1148.1,402.1 1145.43,399.1 1143.5,395.5 Z"/></g>
<g><path style="opacity:1" fill="#dfa5ae" d="M 352.5,399.5 C 351.243,402.427 349.243,404.761 346.5,406.5C 347.757,403.573 349.757,401.239 352.5,399.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dea3ac" d="M 346.5,406.5 C 345.92,408.749 344.587,410.415 342.5,411.5C 343.08,409.251 344.413,407.585 346.5,406.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dfa4ad" d="M 342.5,411.5 C 339.871,415.463 336.871,419.129 333.5,422.5C 335.372,417.957 338.372,414.29 342.5,411.5 Z"/></g>
<g><path style="opacity:0.996" fill="#e0aab3" d="M 1160.5,415.5 C 1162.91,416.911 1164.58,418.911 1165.5,421.5C 1163.09,420.089 1161.42,418.089 1160.5,415.5 Z"/></g>
<g><path style="opacity:1" fill="#dea4ad" d="M 333.5,422.5 C 331.889,426.051 329.556,429.051 326.5,431.5C 328.111,427.949 330.444,424.949 333.5,422.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dfa5ae" d="M 1168.5,425.5 C 1170.59,426.585 1171.92,428.251 1172.5,430.5C 1170.41,429.415 1169.08,427.749 1168.5,425.5 Z"/></g>
<g><path style="opacity:1" fill="#e6c6cb" d="M 324.5,434.5 C 323.588,436.595 322.421,438.595 321,440.5C 320.505,442.473 320.338,444.473 320.5,446.5C 318.833,446.5 317.167,446.5 315.5,446.5C 317.738,441.929 320.738,437.929 324.5,434.5 Z"/></g>
<g><path style="opacity:1" fill="#de9ea8" d="M 313.5,449.5 C 313.155,452.198 311.822,454.198 309.5,455.5C 310.34,453.147 311.674,451.147 313.5,449.5 Z"/></g>
<g><path style="opacity:1" fill="#c4203c" d="M 803.5,798.5 C 766.833,764.833 730.167,731.167 693.5,697.5C 804.15,614.363 914.983,531.363 1026,448.5C 952.629,565.551 878.463,682.218 803.5,798.5 Z"/></g>
<g><path style="opacity:1" fill="#e2b3ba" d="M 1187.5,451.5 C 1189.83,454.785 1192.16,458.118 1194.5,461.5C 1190.72,459.166 1188.39,455.833 1187.5,451.5 Z"/></g>
<g><path style="opacity:1" fill="#dd9ca6" d="M 293.5,480.5 C 293.245,482.967 292.245,484.967 290.5,486.5C 290.755,484.033 291.755,482.033 293.5,480.5 Z"/></g>
<g><path style="opacity:1" fill="#dc95a0" d="M 1212.5,491.5 C 1214.2,493.566 1215.53,495.9 1216.5,498.5C 1214.06,496.879 1212.72,494.546 1212.5,491.5 Z"/></g>
<g><path style="opacity:0.996" fill="#da8995" d="M 1216.5,498.5 C 1218.25,500.033 1219.25,502.033 1219.5,504.5C 1217.75,502.967 1216.75,500.967 1216.5,498.5 Z"/></g>
<g><path style="opacity:0.996" fill="#da8e99" d="M 1219.5,504.5 C 1222.58,508.702 1224.91,513.368 1226.5,518.5C 1226.17,518.5 1225.83,518.5 1225.5,518.5C 1223.31,513.92 1221.31,509.254 1219.5,504.5 Z"/></g>
<g><path style="opacity:1" fill="#dfa7af" d="M 277.5,511.5 C 276.528,514.437 275.195,517.103 273.5,519.5C 273.609,516.101 274.942,513.434 277.5,511.5 Z"/></g>
<g><path style="opacity:1" fill="#e7cdd1" d="M 1225.5,518.5 C 1225.83,518.5 1226.17,518.5 1226.5,518.5C 1231.32,526.62 1234.99,535.286 1237.5,544.5C 1235.77,542.91 1234.6,540.91 1234,538.5C 1233.67,539.5 1233.33,540.5 1233,541.5C 1232.79,537.594 1232.12,533.594 1231,529.5C 1229.8,527.588 1228.13,526.255 1226,525.5C 1225.69,524.234 1225.19,523.067 1224.5,522C 1225.34,520.989 1225.67,519.822 1225.5,518.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d88290" d="M 266.5,533.5 C 266.245,535.967 265.245,537.967 263.5,539.5C 263.755,537.033 264.755,535.033 266.5,533.5 Z"/></g>
<g><path style="opacity:1" fill="#e5c0c5" d="M 1237.5,544.5 C 1240.62,548.132 1242.62,552.466 1243.5,557.5C 1243.5,558.167 1243.5,558.833 1243.5,559.5C 1241.74,557.197 1240.58,554.53 1240,551.5C 1238.7,550.888 1237.53,550.554 1236.5,550.5C 1237.35,548.591 1237.68,546.591 1237.5,544.5 Z"/></g>
<g><path style="opacity:1" fill="#d67987" d="M 1243.5,557.5 C 1245.24,559.395 1246.24,561.728 1246.5,564.5C 1245.07,563.087 1244.07,561.42 1243.5,559.5C 1243.5,558.833 1243.5,558.167 1243.5,557.5 Z"/></g>
<g><path style="opacity:1" fill="#e4c1c7" d="M 243.5,596.5 C 242.779,602.271 241.613,607.938 240,613.5C 239.243,615.315 238.41,616.981 237.5,618.5C 238.445,610.765 240.445,603.432 243.5,596.5 Z"/></g>
<g><path style="opacity:1" fill="#dd9da7" d="M 1261.5,614.5 C 1262.92,616.515 1263.59,618.848 1263.5,621.5C 1262.08,619.485 1261.41,617.152 1261.5,614.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dfaab3" d="M 237.5,618.5 C 237.59,621.152 236.924,623.485 235.5,625.5C 235.41,622.848 236.076,620.515 237.5,618.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dc97a3" d="M 1264.5,626.5 C 1265.92,628.515 1266.59,630.848 1266.5,633.5C 1265.08,631.485 1264.41,629.152 1264.5,626.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db909c" d="M 235.5,625.5 C 235.59,628.152 234.924,630.485 233.5,632.5C 233.41,629.848 234.076,627.515 235.5,625.5 Z"/></g>
<g><path style="opacity:0.404" fill="#e80d19" d="M 1378.5,630.5 C 1378.5,631.833 1378.5,633.167 1378.5,634.5C 1377.41,634.38 1376.75,633.713 1376.5,632.5C 1376.75,631.287 1377.41,630.62 1378.5,630.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d98996" d="M 1266.5,635.5 C 1268.07,637.102 1268.74,639.102 1268.5,641.5C 1266.93,639.898 1266.26,637.898 1266.5,635.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67c8b" d="M 230.5,648.5 C 230.59,651.152 229.924,653.485 228.5,655.5C 228.41,652.848 229.076,650.515 230.5,648.5 Z"/></g>
<g><path style="opacity:1" fill="#de9da7" d="M 1268.5,643.5 C 1270.22,648.223 1271.22,653.223 1271.5,658.5C 1269.6,653.936 1268.6,648.936 1268.5,643.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d57483" d="M 228.5,659.5 C 228.247,663.04 227.581,666.373 226.5,669.5C 226.336,666.813 226.503,664.146 227,661.5C 227.278,660.584 227.778,659.918 228.5,659.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dea4ad" d="M 1272.5,667.5 C 1274.25,673.926 1275.25,680.593 1275.5,687.5C 1273.58,681.101 1272.58,674.435 1272.5,667.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d88391" d="M 226.5,671.5 C 226.802,675.79 226.136,679.79 224.5,683.5C 224.198,679.21 224.864,675.21 226.5,671.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d26576" d="M 224.5,684.5 C 224.249,689.507 223.916,694.507 223.5,699.5C 223.167,699.5 222.833,699.5 222.5,699.5C 222.189,694.234 222.855,689.234 224.5,684.5 Z"/></g>
<g><path style="opacity:1" fill="#010101" d="M 693.5,697.5 C 730.167,731.167 766.833,764.833 803.5,798.5C 804.706,799.88 804.373,801.047 802.5,802C 692.333,884.167 582.167,966.333 472,1048.5C 472.642,1046.19 473.642,1043.86 475,1041.5C 548.479,927.199 621.312,812.533 693.5,697.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d57383" d="M 1275.5,689.5 C 1277.22,692.845 1277.88,696.511 1277.5,700.5C 1277.17,700.5 1276.83,700.5 1276.5,700.5C 1275.76,696.881 1275.42,693.215 1275.5,689.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67b8a" d="M 1278.5,731.5 C 1279.66,746.661 1279.83,761.994 1279,777.5C 1278.81,779.708 1278.31,781.708 1277.5,783.5C 1277.5,782.5 1277.5,781.5 1277.5,780.5C 1277.5,778.833 1277.5,777.167 1277.5,775.5C 1278.5,761.01 1278.83,746.343 1278.5,731.5 Z"/></g>
<g><path style="opacity:1" fill="#e3bfc5" d="M 1276.5,700.5 C 1276.83,700.5 1277.17,700.5 1277.5,700.5C 1277.79,710.835 1278.13,721.168 1278.5,731.5C 1278.83,746.343 1278.5,761.01 1277.5,775.5C 1277.61,750.492 1277.27,725.492 1276.5,700.5 Z"/></g>
<g><path style="opacity:1" fill="#e4c1c7" d="M 222.5,699.5 C 222.833,699.5 223.167,699.5 223.5,699.5C 221.886,733.883 222.22,768.217 224.5,802.5C 223.833,800.833 223.167,799.167 222.5,797.5C 222.5,796.5 222.5,795.5 222.5,794.5C 221.591,772.182 221.257,749.849 221.5,727.5C 221.538,718.154 221.871,708.82 222.5,699.5 Z"/></g>
<g><path style="opacity:0.996" fill="#e1b1b9" d="M 1277.5,780.5 C 1277.5,781.5 1277.5,782.5 1277.5,783.5C 1277.61,789.726 1276.95,795.726 1275.5,801.5C 1275.68,794.309 1276.35,787.309 1277.5,780.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d05c6e" d="M 221.5,727.5 C 221.257,749.849 221.591,772.182 222.5,794.5C 221.691,792.708 221.191,790.708 221,788.5C 220.171,767.996 220.337,747.663 221.5,727.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d7828f" d="M 1275.5,809.5 C 1275.72,814.1 1275.05,818.433 1273.5,822.5C 1273.28,817.9 1273.95,813.567 1275.5,809.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d05a6c" d="M 222.5,797.5 C 223.167,799.167 223.833,800.833 224.5,802.5C 224.613,807.518 224.947,812.518 225.5,817.5C 225.833,820.167 226.167,822.833 226.5,825.5C 224.934,821.08 223.767,816.413 223,811.5C 222.501,806.845 222.334,802.179 222.5,797.5 Z"/></g>
<g><path style="opacity:0.996" fill="#de9fa9" d="M 225.5,817.5 C 226.222,817.918 226.722,818.584 227,819.5C 227.411,824.519 227.911,829.519 228.5,834.5C 227.833,833.5 227.167,832.5 226.5,831.5C 226.5,829.5 226.5,827.5 226.5,825.5C 226.167,822.833 225.833,820.167 225.5,817.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67a89" d="M 1270.5,846.5 C 1270.88,848.698 1270.21,850.365 1268.5,851.5C 1268.12,849.302 1268.79,847.635 1270.5,846.5 Z"/></g>
<g><path style="opacity:0.992" fill="#cb465a" d="M 226.5,831.5 C 227.167,832.5 227.833,833.5 228.5,834.5C 229.369,843.249 230.702,851.915 232.5,860.5C 230.498,856.035 228.998,851.368 228,846.5C 227.589,841.481 227.089,836.481 226.5,831.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dc98a4" d="M 1266.5,863.5 C 1266.88,865.698 1266.21,867.365 1264.5,868.5C 1264.12,866.302 1264.79,864.635 1266.5,863.5 Z"/></g>
<g><path style="opacity:0.992" fill="#ce5364" d="M 1268.5,854.5 C 1268.22,863.747 1266.22,872.413 1262.5,880.5C 1262.76,877.402 1263.42,874.402 1264.5,871.5C 1264.5,870.5 1264.5,869.5 1264.5,868.5C 1266.21,867.365 1266.88,865.698 1266.5,863.5C 1266.22,860.171 1266.88,857.171 1268.5,854.5 Z"/></g>
<g><path style="opacity:0.992" fill="#c93c4e" d="M 233.5,864.5 C 234.955,870.576 236.622,876.576 238.5,882.5C 239.393,887.523 240.393,892.523 241.5,897.5C 239.395,894.592 238.395,891.258 238.5,887.5C 237.178,887.67 236.011,887.337 235,886.5C 234.713,884.109 234.213,881.776 233.5,879.5C 234.098,874.559 234.098,869.559 233.5,864.5 Z"/></g>
<g><path style="opacity:1" fill="#e6c7cc" d="M 1264.5,871.5 C 1263.42,874.402 1262.76,877.402 1262.5,880.5C 1261.19,884.776 1260.19,889.11 1259.5,893.5C 1258.83,893.833 1258.17,894.167 1257.5,894.5C 1258.51,887.735 1260.01,881.068 1262,874.5C 1262.38,873.058 1263.21,872.058 1264.5,871.5 Z"/></g>
<g><path style="opacity:1" fill="#e7ced2" d="M 238.5,882.5 C 239.83,885.124 241.663,887.458 244,889.5C 244.839,898.091 246.339,906.758 248.5,915.5C 246.896,914.713 246.229,913.38 246.5,911.5C 246.156,907.38 244.823,903.714 242.5,900.5C 242.737,899.209 242.404,898.209 241.5,897.5C 240.393,892.523 239.393,887.523 238.5,882.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d36373" d="M 1259.5,893.5 C 1258.04,898.072 1256.87,902.739 1256,907.5C 1255.62,908.056 1255.12,908.389 1254.5,908.5C 1255.14,903.685 1256.14,899.018 1257.5,894.5C 1258.17,894.167 1258.83,893.833 1259.5,893.5 Z"/></g>
<g><path style="opacity:0.361" fill="#e80d19" d="M 1369.5,903.5 C 1369.77,905.099 1369.43,906.432 1368.5,907.5C 1367.88,907.083 1367.54,906.416 1367.5,905.5C 1367.75,904.287 1368.41,903.62 1369.5,903.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d16071" d="M 242.5,900.5 C 244.823,903.714 246.156,907.38 246.5,911.5C 245.883,911.389 245.383,911.056 245,910.5C 243.857,907.223 243.023,903.89 242.5,900.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d46b79" d="M 1250.5,921.5 C 1248.75,928.544 1246.08,935.21 1242.5,941.5C 1243.04,938.445 1243.87,935.445 1245,932.5C 1246.65,928.699 1248.49,925.032 1250.5,921.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d15c69" d="M 259.5,948.5 C 261.793,951.061 263.627,954.061 265,957.5C 265.49,958.793 265.657,960.127 265.5,961.5C 264.276,958.928 262.609,956.595 260.5,954.5C 259.534,952.604 259.201,950.604 259.5,948.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db929e" d="M 1235.5,958.5 C 1235.25,960.967 1234.25,962.967 1232.5,964.5C 1232.75,962.033 1233.75,960.033 1235.5,958.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d5717f" d="M 265.5,961.5 C 270.262,969.445 274.262,977.779 277.5,986.5C 273.41,979.815 269.576,972.815 266,965.5C 265.51,964.207 265.343,962.873 265.5,961.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d05867" d="M 1230.5,970.5 C 1229.94,972.801 1229.44,975.134 1229,977.5C 1228.29,978.381 1227.46,979.047 1226.5,979.5C 1226.34,978.127 1226.51,976.793 1227,975.5C 1227.9,973.569 1229.07,971.903 1230.5,970.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db8d99" d="M 1226.5,979.5 C 1223.94,985.167 1220.94,990.501 1217.5,995.5C 1219.44,989.434 1222.44,984.1 1226.5,979.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67988" d="M 279.5,990.5 C 282.241,993.686 284.241,997.353 285.5,1001.5C 284.542,1001.05 283.708,1000.38 283,999.5C 281.346,996.707 280.179,993.707 279.5,990.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d57481" d="M 1215.5,999.5 C 1213.35,1004.48 1211.18,1009.48 1209,1014.5C 1207.95,1016.38 1206.45,1017.72 1204.5,1018.5C 1207.62,1011.77 1211.28,1005.44 1215.5,999.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d77988" d="M 285.5,1001.5 C 287.245,1003.03 288.245,1005.03 288.5,1007.5C 286.755,1005.97 285.755,1003.97 285.5,1001.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d26475" d="M 288.5,1007.5 C 290.199,1009.57 291.532,1011.9 292.5,1014.5C 290.058,1012.88 288.725,1010.55 288.5,1007.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d77c8a" d="M 1204.5,1018.5 C 1204.28,1021.55 1202.94,1023.88 1200.5,1025.5C 1201.47,1022.9 1202.8,1020.57 1204.5,1018.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d26170" d="M 1200.5,1025.5 C 1200.46,1029.2 1198.8,1031.87 1195.5,1033.5C 1196.67,1030.49 1198.34,1027.82 1200.5,1025.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d77d8c" d="M 1195.5,1033.5 C 1194.62,1036.7 1192.95,1039.37 1190.5,1041.5C 1191.38,1038.3 1193.05,1035.63 1195.5,1033.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d57382" d="M 1186.5,1047.5 C 1184.94,1051.39 1182.6,1054.73 1179.5,1057.5C 1181.06,1053.61 1183.4,1050.27 1186.5,1047.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d77a89" d="M 1179.5,1057.5 C 1177.98,1060.53 1175.98,1063.2 1173.5,1065.5C 1174.53,1062.11 1176.53,1059.44 1179.5,1057.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d67685" d="M 1173.5,1065.5 C 1172.92,1067.75 1171.59,1069.42 1169.5,1070.5C 1170.08,1068.25 1171.41,1066.58 1173.5,1065.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d57482" d="M 1167.5,1073.5 C 1165.31,1077.21 1162.64,1080.54 1159.5,1083.5C 1161.21,1079.43 1163.87,1076.09 1167.5,1073.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d46d7c" d="M 1159.5,1083.5 C 1156.26,1088.29 1152.76,1092.95 1149,1097.5C 1146.3,1100.37 1143.46,1103.04 1140.5,1105.5C 1146.09,1097.57 1152.43,1090.24 1159.5,1083.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d05b6c" d="M 355.5,1101.5 C 359.566,1104.56 362.899,1108.23 365.5,1112.5C 361.434,1109.44 358.101,1105.77 355.5,1101.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d26575" d="M 1140.5,1105.5 C 1130.09,1117.41 1119.09,1128.91 1107.5,1140C 1106.91,1140.46 1106.24,1140.63 1105.5,1140.5C 1116.83,1128.5 1128.5,1116.83 1140.5,1105.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d26475" d="M 1105.5,1140.5 C 1096.1,1150.35 1085.77,1159.02 1074.5,1166.5C 1084.64,1157.6 1094.97,1148.93 1105.5,1140.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d57281" d="M 1074.5,1166.5 C 1070.04,1170.9 1065.04,1174.56 1059.5,1177.5C 1063.96,1173.1 1068.96,1169.44 1074.5,1166.5 Z"/></g>
<g><path style="opacity:1" fill="#e9d9db" d="M 434.5,1172.5 C 436.017,1172.51 437.184,1173.18 438,1174.5C 439.458,1173.25 440.958,1173.25 442.5,1174.5C 454.287,1183.47 466.62,1191.47 479.5,1198.5C 479.366,1200.29 479.699,1201.96 480.5,1203.5C 474.019,1199.42 467.353,1195.59 460.5,1192C 451.367,1186.02 442.7,1179.52 434.5,1172.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d98995" d="M 1043.5,1188.5 C 1040.35,1191.58 1036.68,1193.91 1032.5,1195.5C 1035.65,1192.42 1039.32,1190.09 1043.5,1188.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d67583" d="M 1029.5,1197.5 C 1026.21,1200.82 1022.21,1203.16 1017.5,1204.5C 1021.13,1201.68 1025.13,1199.35 1029.5,1197.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dd9ba5" d="M 492.5,1210.5 C 495.546,1210.72 497.879,1212.06 499.5,1214.5C 496.9,1213.53 494.566,1212.2 492.5,1210.5 Z"/></g>
<g><path style="opacity:1" fill="#da8e9a" d="M 499.5,1214.5 C 501.967,1214.75 503.967,1215.75 505.5,1217.5C 503.033,1217.25 501.033,1216.25 499.5,1214.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d15a69" d="M 1005.5,1211.5 C 1002.68,1215 999.015,1217 994.5,1217.5C 997.686,1214.76 1001.35,1212.76 1005.5,1211.5 Z"/></g>
<g><path style="opacity:1" fill="#db95a0" d="M 509.5,1219.5 C 514.632,1221.09 519.298,1223.42 523.5,1226.5C 518.368,1224.91 513.702,1222.58 509.5,1219.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d87f8d" d="M 990.5,1219.5 C 986.554,1222.39 982.221,1224.72 977.5,1226.5C 981.184,1223.25 985.517,1220.91 990.5,1219.5 Z"/></g>
<g><path style="opacity:1" fill="#de9ea8" d="M 525.5,1227.5 C 530.538,1228.19 534.871,1230.19 538.5,1233.5C 533.954,1231.88 529.621,1229.88 525.5,1227.5 Z"/></g>
<g><path style="opacity:1" fill="#e3b8be" d="M 975.5,1226.5 C 974.097,1227.93 972.431,1229.1 970.5,1230C 965.68,1231.58 961.014,1233.41 956.5,1235.5C 957.287,1233.9 958.62,1233.23 960.5,1233.5C 959.835,1230.11 960.835,1229.11 963.5,1230.5C 967.696,1229.61 971.696,1228.27 975.5,1226.5 Z"/></g>
<g><path style="opacity:0.992" fill="#cc4658" d="M 540.5,1234.5 C 548.18,1237.72 555.846,1240.72 563.5,1243.5C 559.287,1243.35 555.287,1242.35 551.5,1240.5C 549.065,1242.28 548.065,1241.61 548.5,1238.5C 545.194,1238.18 542.527,1236.85 540.5,1234.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dd9ea8" d="M 950.5,1237.5 C 948.605,1239.24 946.272,1240.24 943.5,1240.5C 945.395,1238.76 947.728,1237.76 950.5,1237.5 Z"/></g>
<g><path style="opacity:0.992" fill="#db8f9b" d="M 943.5,1240.5 C 941.245,1242.38 938.578,1243.38 935.5,1243.5C 937.755,1241.62 940.422,1240.62 943.5,1240.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d77c8a" d="M 934.5,1244.5 C 931.322,1246.01 927.989,1247.34 924.5,1248.5C 927.113,1245.84 930.446,1244.51 934.5,1244.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d26474" d="M 908.5,1253.5 C 904.32,1256.1 899.654,1257.43 894.5,1257.5C 898.94,1255.75 903.607,1254.41 908.5,1253.5 Z"/></g>
<g><path style="opacity:1" fill="#e2b2b9" d="M 588.5,1251.5 C 595.471,1253.39 602.471,1255.23 609.5,1257C 611.066,1257.61 612.4,1258.44 613.5,1259.5C 604.653,1258.23 596.32,1255.57 588.5,1251.5 Z"/></g>
<g><path style="opacity:1" fill="#e4c0c5" d="M 614.5,1259.5 C 618.226,1259.18 621.893,1259.51 625.5,1260.5C 628.295,1261.73 630.962,1263.07 633.5,1264.5C 626.91,1263.41 620.577,1261.74 614.5,1259.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d05868" d="M 881.5,1260.5 C 875.211,1264.45 868.211,1266.45 860.5,1266.5C 867.105,1263.5 874.105,1261.5 881.5,1260.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dfa3ad" d="M 638.5,1265.5 C 641.518,1265.34 644.518,1265.5 647.5,1266C 649.833,1267.04 652.166,1267.88 654.5,1268.5C 648.823,1268.62 643.49,1267.62 638.5,1265.5 Z"/></g>
<g><path style="opacity:0.996" fill="#dea6af" d="M 850.5,1267.5 C 847.026,1268.52 843.36,1269.19 839.5,1269.5C 839.918,1268.78 840.584,1268.28 841.5,1268C 844.482,1267.5 847.482,1267.34 850.5,1267.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d77f8d" d="M 654.5,1268.5 C 658.04,1268.75 661.373,1269.42 664.5,1270.5C 661.813,1270.66 659.146,1270.5 656.5,1270C 655.584,1269.72 654.918,1269.22 654.5,1268.5 Z"/></g>
<g><path style="opacity:0.996" fill="#db919d" d="M 665.5,1270.5 C 669.79,1270.2 673.79,1270.86 677.5,1272.5C 673.21,1272.8 669.21,1272.14 665.5,1270.5 Z"/></g>
<g><path style="opacity:0.992" fill="#d67987" d="M 838.5,1269.5 C 831.844,1271.94 824.844,1273.28 817.5,1273.5C 817.918,1272.78 818.584,1272.28 819.5,1272C 825.855,1271.19 832.188,1270.36 838.5,1269.5 Z"/></g>
<g><path style="opacity:1" fill="#dc9aa5" d="M 690.5,1273.5 C 695.1,1273.28 699.433,1273.95 703.5,1275.5C 698.9,1275.72 694.567,1275.05 690.5,1273.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d88591" d="M 816.5,1273.5 C 809.361,1274.71 802.028,1275.37 794.5,1275.5C 795.952,1274.7 797.618,1274.2 799.5,1274C 805.157,1273.5 810.824,1273.33 816.5,1273.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d8818f" d="M 707.5,1275.5 C 730.151,1276.41 752.818,1276.74 775.5,1276.5C 775.5,1276.83 775.5,1277.17 775.5,1277.5C 753.474,1277.79 731.474,1277.46 709.5,1276.5C 708.508,1276.67 707.842,1276.34 707.5,1275.5 Z"/></g>
<g><path style="opacity:0.996" fill="#d36a7b" d="M 790.5,1275.5 C 787.655,1276.34 784.655,1277.01 781.5,1277.5C 779.5,1277.5 777.5,1277.5 775.5,1277.5C 775.5,1277.17 775.5,1276.83 775.5,1276.5C 780.473,1275.84 785.473,1275.5 790.5,1275.5 Z"/></g>
<g><path style="opacity:0.992" fill="#c93951" d="M 709.5,1276.5 C 731.474,1277.46 753.474,1277.79 775.5,1277.5C 777.5,1277.5 779.5,1277.5 781.5,1277.5C 758.67,1278.66 735.67,1278.83 712.5,1278C 711.263,1277.77 710.263,1277.27 709.5,1276.5 Z"/></g>
</svg>`;

    const colors = ["black"]; // Default label color

    const mapData = await getMapData(options);

    const mapView = await show3dMap(document.getElementById('mappedin-map') as HTMLDivElement, mapData, { auto: false });

    // Initial camera position and zoom level
    const initialCameraPosition = mapData.mapCenter; 
    const initialZoomLevel = 19;  
    const initialPitch = 1000;

    mapView.Camera.animate({ center: initialCameraPosition, zoomLevel: initialZoomLevel, pitch: initialPitch, bearing:140});

    const maxZoomLevel = 30; 
    const minZoomLevel = 18; 
    mapView.Camera.maxZoomLevel = maxZoomLevel;
    mapView.Camera.minZoomLevel = minZoomLevel; 
    
   const stairsIcon = '<svg height="200px" width="200px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 504.123 504.123" xml:space="preserve" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <circle style="fill:#99A8C1;" cx="252.062" cy="252.062" r="252.062"></circle> <path style="fill:#99A8C1;" d="M73.83,73.823c98.43-98.43,258.032-98.43,356.462,0c98.43,98.438,98.446,258.032,0,356.478"></path> <polygon points="358.4,216.615 326.892,216.615 326.892,129.969 405.662,129.969 405.662,161.477 358.4,161.477 "></polygon> <polygon points="295.385,263.877 263.877,263.877 263.877,185.108 350.523,185.108 350.523,216.615 295.385,216.615 "></polygon> <polygon points="240.246,319.015 208.738,319.015 208.738,232.369 295.385,232.369 295.385,263.877 240.246,263.877 "></polygon> <polygon points="185.108,382.031 98.462,382.031 98.462,350.523 153.6,350.523 153.6,287.508 240.246,287.508 240.246,319.015 185.108,319.015 "></polygon> </g></svg>'
   const elevatorIcon = `<svg height="200px" width="200px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 504.123 504.123" xml:space="preserve" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <circle style="fill:#00C67F;" cx="252.062" cy="252.062" r="252.062"></circle> <path style="fill:#00C67F;" d="M73.83,73.823c98.43-98.43,258.032-98.43,356.462,0c98.43,98.438,98.446,258.032,0,356.478"></path> <g> <path style="fill:#1D2321;" d="M227.942,148.968c2.938,0,5.309-2.387,5.309-5.325l0.016-46.781l14.588,14.596 c3.119,3.119,8.168,3.119,11.28,0.008c3.119-3.119,3.119-8.168,0-11.288L227.95,68.986l-31.201,31.193 c-3.111,3.111-3.111,8.168,0,11.28c3.119,3.119,8.184,3.119,11.296,0l14.604-14.596l-0.016,46.781 C222.633,146.582,224.996,148.968,227.942,148.968z"></path> <path style="fill:#1D2321;" d="M276.196,86.449c-2.938,0-5.309,2.387-5.309,5.325l-0.016,46.781l-14.588-14.596 c-3.119-3.119-8.184-3.119-11.296-0.008c-3.111,3.119-3.111,8.168,0,11.288l31.201,31.193l31.185-31.193 c3.111-3.111,3.111-8.168,0-11.28c-3.111-3.119-8.168-3.119-11.28,0l-14.604,14.596l0.016-46.781 C281.505,88.828,279.142,86.449,276.196,86.449z"></path> <polygon style="fill:#1D2321;" points="384,402.723 120.115,402.723 120.115,138.831 177.231,138.831 177.231,154.585 135.869,154.585 135.869,386.97 368.246,386.97 368.246,154.585 326.892,154.585 326.892,138.831 384,138.831 "></polygon> </g> <g> <polygon style="fill:#363D3B;" points="326.892,154.585 368.246,154.585 368.246,368.262 384,384.016 384,138.831 326.892,138.831 "></polygon> <polygon style="fill:#363D3B;" points="154.585,154.585 177.231,154.585 177.231,138.831 138.831,138.831 "></polygon> </g> <g> <path style="fill:#1D2321;" d="M210.219,301.458c0,8.696-7.05,15.754-15.754,15.754h-15.754c-8.696,0-15.754-7.058-15.754-15.754 v-60.062c0-8.696,7.058-15.754,15.754-15.754h15.754c8.704,0,15.754,7.058,15.754,15.754V301.458z"></path> <path style="fill:#1D2321;" d="M184.619,366.931c0,4.08-3.308,7.389-7.389,7.389l0,0c-4.08,0-7.389-3.308-7.389-7.389v-59.077 c0-4.08,3.308-7.389,7.389-7.389l0,0c4.08,0,7.389,3.308,7.389,7.389V366.931z"></path> <path style="fill:#1D2321;" d="M202.342,366.931c0,4.08-3.308,7.389-7.389,7.389l0,0c-4.08,0-7.389-3.308-7.389-7.389v-59.077 c0-4.08,3.308-7.389,7.389-7.389l0,0c4.08,0,7.389,3.308,7.389,7.389V366.931z"></path> <path style="fill:#1D2321;" d="M207.013,207.919c0,8.696-7.05,15.754-15.754,15.754h-9.358c-8.696,0-15.754-7.058-15.754-15.754 v-9.358c0-8.696,7.058-15.754,15.754-15.754h9.358c8.704,0,15.754,7.058,15.754,15.754V207.919z"></path> <path style="fill:#1D2321;" d="M275.692,301.458c0,8.696-7.05,15.754-15.754,15.754h-15.754c-8.696,0-15.754-7.058-15.754-15.754 v-60.062c0-8.696,7.058-15.754,15.754-15.754h15.754c8.704,0,15.754,7.058,15.754,15.754V301.458z"></path> <path style="fill:#1D2321;" d="M250.092,366.931c0,4.08-3.308,7.389-7.389,7.389l0,0c-4.08,0-7.389-3.308-7.389-7.389v-59.077 c0-4.08,3.308-7.389,7.389-7.389l0,0c4.08,0,7.389,3.308,7.389,7.389V366.931z"></path> <path style="fill:#1D2321;" d="M267.815,366.931c0,4.08-3.308,7.389-7.389,7.389l0,0c-4.08,0-7.389-3.308-7.389-7.389v-59.077 c0-4.08,3.308-7.389,7.389-7.389l0,0c4.08,0,7.389,3.308,7.389,7.389V366.931z"></path> <path style="fill:#1D2321;" d="M272.494,207.919c0,8.696-7.05,15.754-15.754,15.754h-9.358c-8.696,0-15.754-7.058-15.754-15.754 v-9.358c0-8.696,7.058-15.754,15.754-15.754h9.358c8.704,0,15.754,7.058,15.754,15.754V207.919z"></path> <path style="fill:#1D2321;" d="M341.165,301.458c0,8.696-7.05,15.754-15.754,15.754h-15.754c-8.696,0-15.754-7.058-15.754-15.754 v-60.062c0-8.696,7.058-15.754,15.754-15.754h15.754c8.704,0,15.754,7.058,15.754,15.754V301.458z"></path> <path style="fill:#1D2321;" d="M315.565,366.931c0,4.08-3.308,7.389-7.389,7.389l0,0c-4.08,0-7.389-3.308-7.389-7.389v-59.077 c0-4.08,3.308-7.389,7.389-7.389l0,0c4.08,0,7.389,3.308,7.389,7.389V366.931z"></path> <path style="fill:#1D2321;" d="M333.288,366.931c0,4.08-3.308,7.389-7.389,7.389l0,0c-4.08,0-7.389-3.308-7.389-7.389v-59.077 c0-4.08,3.308-7.389,7.389-7.389l0,0c4.08,0,7.389,3.308,7.389,7.389V366.931z"></path> <path style="fill:#1D2321;" d="M337.967,207.919c0,8.696-7.05,15.754-15.754,15.754h-9.358c-8.696,0-15.754-7.058-15.754-15.754 v-9.358c0-8.696,7.058-15.754,15.754-15.754h9.358c8.704,0,15.754,7.058,15.754,15.754V207.919z"></path> </g> </g></svg>`;


mapData.getByType("connection").forEach((connection) => {
    // Get the names of the floors associated with the connection.
    const floorNames = connection.floors.map(floor => floor.name).join(", ");
    
    const labelText = `${connection.name} (${connection.type}) - Floors: ${floorNames}`;
    
    // Set the default color and icon
    let connectionColor = "#99A8C1";  
    let connectionIcon = icon;
    
    if (connection.type.toLowerCase().includes("stairs")) {
        connectionColor = "#99A8C1"; 
        connectionIcon = stairsIcon; 
    } else if (connection.type.toLowerCase() === "elevator") {
        connectionColor = "#00C67F"; 
        connectionIcon = elevatorIcon; 
    }
    
    // Define the label appearance with the icon
    const labelAppearance = {
        marker: {
            foregroundColor: {
                active: connectionColor,
                inactive: connectionColor,
            },
            icon: connectionIcon,
            iconSize: 25,
            iconVisibilityThreshold: 1,
        },
        text: {
            foregroundColor: connectionColor,
        },
    };

    connection.coordinates.forEach((coord) => {
        mapView.Labels.add(coord, labelText, {
            appearance: labelAppearance
        });
    });
});


const maleIcon = '<svg fill="#000000" viewBox="-11.5 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>male</title> <path d="M7 7.344c0-1.313-1.063-2.375-2.375-2.375-1.281 0-2.344 1.063-2.344 2.375s1.063 2.375 2.344 2.375c1.313 0 2.375-1.063 2.375-2.375zM0.781 10.5h7.906c0.438 0 0.781 0.344 0.781 0.781v5.125c0 0.438-0.344 0.813-0.781 0.813v0c-0.438 0-0.781-0.375-0.781-0.813v-2.344c0-0.438-0.219-0.813-0.5-0.813s-0.5 0.375-0.5 0.813v12.625c0 0.438-0.344 0.781-0.781 0.781v0c-0.438 0-0.781-0.344-0.781-0.781v-5.531c0-0.438-0.281-0.781-0.594-0.781-0.344 0-0.594 0.344-0.594 0.781v5.531c0 0.438-0.375 0.781-0.813 0.781v0c-0.438 0-0.781-0.344-0.781-0.781v-12.625c0-0.438-0.219-0.813-0.5-0.813-0.25 0-0.469 0.375-0.469 0.813v2.344c0 0.438-0.375 0.813-0.813 0.813v0c-0.438 0-0.781-0.375-0.781-0.813v-5.125c0-0.438 0.344-0.781 0.781-0.781z"></path> </g></svg>'
const femaleIcon = '<svg fill="#000000" viewBox="-10.5 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <title>female</title> <path d="M7.656 7.344c0-1.313-1.063-2.375-2.375-2.375-1.281 0-2.344 1.063-2.344 2.375s1.063 2.375 2.344 2.375c1.313 0 2.375-1.063 2.375-2.375zM8.969 11.219l1.563 4.906c0.156 0.406-0.094 0.844-0.5 0.969-0.406 0.156-0.844-0.094-1-0.5l-0.844-2.594c-0.125-0.406-0.5-0.75-0.844-0.75-0.313 0-0.469 0.344-0.344 0.75l1.813 5.594c0.125 0.406-0.125 0.75-0.563 0.75h-0.781v6.344c0 0.438-0.375 0.781-0.781 0.781-0.438 0-0.813-0.344-0.813-0.781v-6.344h-1.188v6.344c0 0.438-0.344 0.781-0.781 0.781s-0.781-0.344-0.781-0.781v-6.344h-0.781c-0.438 0-0.688-0.344-0.563-0.75l1.813-5.594c0.125-0.406-0.031-0.75-0.375-0.75-0.313 0-0.688 0.344-0.844 0.75l-0.844 2.594c-0.125 0.406-0.563 0.656-0.969 0.5-0.438-0.125-0.656-0.563-0.531-0.969l1.594-4.906c0.125-0.406 0.594-0.75 1.031-0.75h5.281c0.438 0 0.875 0.344 1.031 0.75z"></path> </g></svg>'
const bothIcon = '<svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path fill-rule="evenodd" clip-rule="evenodd" d="M11.9999 14.5028C13.7948 14.5028 15.2499 13.0471 15.2499 11.2514C15.2499 9.4557 13.7948 8 11.9999 8C10.205 8 8.7499 9.4557 8.7499 11.2514C8.7499 13.0471 10.205 14.5028 11.9999 14.5028ZM5.38474 26.0764L8.07629 19.6097V21.8354V29.6806V38.6808C8.07629 39.4065 8.68147 40.0002 9.42113 40.0002C10.1608 40.0002 10.766 39.4065 10.766 38.6808V29.6806H13.3102V38.6808C13.3102 39.4065 13.9154 40.0002 14.655 40.0002C15.3947 40.0002 15.9999 39.4065 15.9999 38.6808L15.9999 29.6806V21.8354V20.057L18.6241 26.0977C18.9542 26.8575 19.8378 27.2059 20.5976 26.8758C21.3574 26.5457 21.7058 25.6621 21.3757 24.9023L18.1273 17.4249C17.7514 16.5597 16.898 16 15.9548 16H11.1769H9.11978H7.909C6.95244 16 6.08976 16.5754 5.72219 17.4585L2.61507 24.9236C2.29673 25.6884 2.65869 26.5665 3.42351 26.8848C4.18833 27.2032 5.06641 26.8412 5.38474 26.0764ZM29.3385 25.0948L32 19.8342V24.3122H32L29.4418 30.8923C29.1458 31.6537 29.7074 32.4746 30.5243 32.4746H32V38.6142C32 39.3975 32.617 40.0384 33.3711 40.0384C34.1251 40.0384 34.7421 39.3975 34.7421 38.6142V32.4746H37.2555V38.6142C37.2555 39.3975 37.8725 40.0384 38.6266 40.0384C39.3806 40.0384 39.9976 39.3975 39.9976 38.6142V32.4746H41.7534C42.5883 32.4746 43.1505 31.6201 42.82 30.8534L40 24.3122H39.9976V19.8292L42.6616 25.0948C43.0356 25.8341 43.938 26.1301 44.6772 25.7561C45.4164 25.3822 45.7125 24.4797 45.3385 23.7405L42.1609 17.4597C41.7078 16.5642 40.7896 15.9997 39.7861 15.9997H35.3365H33.2369H32.2141C31.2106 15.9997 30.2923 16.5642 29.8393 17.4597L26.6616 23.7405C26.2876 24.4797 26.5837 25.3822 27.3229 25.7561C28.0621 26.1301 28.9645 25.8341 29.3385 25.0948ZM36 14.5028C37.7949 14.5028 39.25 13.0471 39.25 11.2514C39.25 9.4557 37.7949 8 36 8C34.2051 8 32.75 9.4557 32.75 11.2514C32.75 13.0471 34.2051 14.5028 36 14.5028Z" fill="#333333"></path> </g></svg>'
const gateIcon = '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path fill="#000000" d="M248 88v32.652c-5.287.834-10.615 2.448-16 4.63V104h-16v29.16c-1.698.96-3.402 1.953-5.115 2.98-3.598 2.16-7.23 4.48-10.885 6.905V120h-16v34.19c-5.324 3.85-10.664 7.826-16 11.822V152h-16v25.965c-5.402 4.008-10.75 7.9-16 11.592V168h-16v32.213c-1.04.647-2.09 1.312-3.115 1.928-4.448 2.67-8.766 5.003-12.885 6.962V200H88V214.973c-2.89.67-5.575 1.027-8 1.027h-8v-32H24v304h48V232h8c2.658 0 5.324-.23 8-.652V488h16V226.717c5.272-2.138 10.6-4.82 16-7.877V488h16V208.955c5.294-3.512 10.637-7.264 16-11.144V488h16V344h16v144h16V162.443c5.462-3.838 10.81-7.427 16-10.656V296h16V142.898c5.793-2.754 11.188-4.755 16-5.87V296h16V137.027c4.812 1.116 10.207 3.117 16 5.87V296h16V151.787c5.19 3.23 10.538 6.818 16 10.656V488h16V344h16v144h16V197.81c5.363 3.88 10.706 7.633 16 11.145V488h16V218.84c5.4 3.056 10.728 5.74 16 7.877V488h16V231.348c2.676.422 5.342.652 8 .652h8v256h48V184h-48v32h-8c-2.425 0-5.11-.357-8-1.027V200h-16v9.102c-4.12-1.96-8.437-4.292-12.885-6.96-1.026-.617-2.075-1.282-3.115-1.93V168h-16V189.557c-5.252-3.69-10.598-7.584-16-11.592V152h-16v14.012c-5.336-3.996-10.676-7.97-16-11.823V120h-16v23.045c-3.654-2.424-7.287-4.746-10.885-6.904-1.713-1.027-3.417-2.02-5.115-2.98V104h-16v21.283c-5.385-2.183-10.713-3.797-16-4.63V88h-16zM48 120c-13.35 0-24 10.65-24 24s10.65 24 24 24 24-10.65 24-24-10.65-24-24-24zm416 0c-13.35 0-24 10.65-24 24s10.65 24 24 24 24-10.65 24-24-10.65-24-24-24zm-280 54.035V328h-16V185.988c1.6-1.198 3.203-2.39 4.8-3.588 3.75-2.81 7.484-5.608 11.2-8.365zm144 0c3.716 2.757 7.45 5.555 11.2 8.365 1.597 1.2 3.2 2.39 4.8 3.588V328h-16V174.035zM216 312v32h80v-32h-80zm0 48v128h16V360h-16zm32 0v128h16V360h-16zm32 0v128h16V360h-16z"></path></g></svg>'

//CUSTOMIZE SPACES 
   // Update state of spaces and add labels
   mapData.getByType("space").forEach((space, index) => {
        let spacecolor = "#D8D8D4"; // Default room color 
        let connectionIcon = icon;

        mapView.updateState(space, {  
            color: spacecolor,   
            interactive: true,
            hoverColor: "#E8E4C9",
        });

        if (space.type === "hallway") {
            let color = "#F1EFEC"; 
            // Update the state of the space
            mapView.updateState(space, { color: color });
        }

        if (space.name) {
            let color = colors[index % colors.length];
            
            ///*
            if (space.name.includes("COE")) {
                color = "orange";
                // Update the state of the space
                //mapView.updateState(space, { color: color });
            }

            if (space.name.includes("COS")) {
                color = "red";
                // Update the state of the space
                //mapView.updateState(space, { color: color });
            }

            if (space.name.includes("CIT")) {
                color = "green";
                // Update the state of the space
                //mapView.updateState(space, { color: color });
            }

            if (space.name.includes("CLA")) {
                color = "#FF1493";
                // Update the state of the space
                //mapView.updateState(space, { color: color });
            }

            if (space.name.includes("CIE")) {
                color = "violet";
                // Update the state of the space
                //mapView.updateState(space, { color: color });
            }

            if (space.name.includes("CAFA")) {
                color = "brown";
                // Update the state of the space
                //mapView.updateState(space, { color: color });
            }
            //*/

            if (space.name.includes("Fire Exit")) {
                color = "#BF0000";
                mapView.updateState(space, { color: color });
            }

            if (space.name.includes("Male Restroom")) {
                color = "#ADD8E6"; 
                mapView.updateState(space, { color: color }); 
                connectionIcon = maleIcon

            } else if (space.name.includes("Female Restroom")) {
                color = "#FFB6C1"; 
                mapView.updateState(space, { color: color }); 
                connectionIcon = femaleIcon

            }else if (space.name.includes("PWD Restroom")) {
                color = "#EE82EE";
                mapView.updateState(space, { color: color }); 
                connectionIcon = bothIcon
            }else if (space.name.includes("Gate")) {
                color = "#90EE90";
                mapView.updateState(space, { color: color }); 
                connectionIcon = gateIcon
            }

            /*
            if (space.name.includes("Office")) {
                color = "#CCCC00";
                //mapView.updateState(space, { color: color });
            }

            if (space.name.includes("Faculty")) {
                color = "#9370DB";
                //mapView.updateState(space, { color: color });
            }
            */

            // Add label with the determined color
            mapView.Labels.add(space, space.name, {
                appearance: {
                    marker: {
                        foregroundColor: {
                            active: color,
                            inactive: color,
                        },
                        icon: connectionIcon,
                        iconSize: 13, // Icon size 
                        iconVisibilityThreshold:0.7
                    },
                    text: {
                        foregroundColor: color,
                    },
                },
            });
        }
    }); 

/*
    mapData.getByType("point-of-interest").forEach((poi) => {
        mapView.Labels.add(poi.coordinate, poi.name);
    }); */ 



    //CUSTOMIZE ANNOTATIONS
    mapData.getByType("annotation").forEach((annotation) => {
        const coordinate = annotation.coordinate;
        const annotationText = annotation.type;
    
        let color = "red"; // Default color for annotations 
        if (annotationText.includes("guard")) {
            color = "#000080";  
        } 
        if (annotationText.includes("stretcher")) {
            color = "#FF5F15"; 
        }  
        if (annotationText.includes("doctor")) {
            color = "ffffff";  
        }  
        if (annotationText.includes("first-aid")) {
            color = "ffffff"; 
        }  
        if (annotationText.includes("entrance")) {
            color = "#454B1B"; 
        } 
        if (annotationText.includes("drinking-water")) {
            color = "#7FFFD4"; 
        }
    
        mapView.Labels.add(coordinate, annotationText, {
            appearance: {
                marker: {
                    foregroundColor: {
                        active: color, 
                        inactive: color,
                    },
                    icon: icon,  
                    iconSize: 13, 
                    iconVisibilityThreshold: 1, 
                },
                text: {
                    foregroundColor: color, 
                    size: 12,
                },
            },
        });
    });
  

    const legendContainer = document.createElement("div");
    legendContainer.setAttribute("id", "legend-container");

    const legends = document.createElement("img");
    legends.setAttribute("id", "legends");
    legends.src = "./src/assets/legends.png";
    legends.style.display = "none";

    const showLegends = () => {
        legends.style.display = "block";
    };

    const hideLegends = () => {
        legends.style.display = "none";
    };

    const toggleLegends = () => {
        if (legends.style.display === "none") {
            showLegends();
        } else {
            hideLegends();
        }
    };

    const legendToggleButton = document.createElement("button");
    legendToggleButton.setAttribute("id", "toggle-button");
    legendToggleButton.innerHTML = "<img id='layers-icon' src='./src/assets/legends-icon.png' />";
    legendToggleButton.addEventListener("click", () => {
        toggleLegends();
    });

    // Append elements to the body
    document.body.appendChild(legendContainer);
    legendContainer.appendChild(legendToggleButton);
    legendContainer.appendChild(legends);

    // Create the floor container and selector elements
    const floorContainer = document.createElement("div");
    floorContainer.setAttribute("id", "floor-container");

    const floorSelector = document.createElement("select");
    floorSelector.setAttribute("id", "floor-selector");
    floorSelector.style.display = "none";

    const showFloorSelector = () => {
        floorSelector.style.display = "block";
    };

    const hideFloorSelector = () => {
        floorSelector.style.display = "none";
    };

    const toggleFloorSelector = () => {
        if (floorSelector.style.display === "none") {
            showFloorSelector();
        } else {
            hideFloorSelector();
        }
    };

    const toggleButton = document.createElement("button");
    toggleButton.setAttribute("id", "toggle-button");
    toggleButton.innerHTML = "<img id='layers-icon' src='./src/assets/layers-icon.png' />";
    toggleButton.addEventListener("click", () => {
        toggleFloorSelector();
        floorSelector.size = floorSelector.options.length;
    });

    // Create a container for displaying the current floor level
    const currentFloorContainer = document.createElement("div");
    currentFloorContainer.setAttribute("id", "current-floor-container");
    currentFloorContainer.classList.add('hidden'); 

    // Append elements to the body
    document.body.appendChild(floorContainer);
    floorContainer.appendChild(toggleButton);
    floorContainer.appendChild(floorSelector);
    document.body.appendChild(currentFloorContainer);

    const sortedFloors = mapData.getByType("floor").sort((a, b) => a.name.localeCompare(b.name));
    sortedFloors.forEach((floor) => {
        const option = document.createElement("option");
        option.text = floor.name;
        option.value = floor.id;
        floorSelector.appendChild(option);
    });

    floorSelector.value = mapView.currentFloor.id;

    floorSelector.addEventListener("change", (e) => {
        mapView.setFloor((e.target as HTMLSelectElement).value);
        hideFloorSelector();
    }); 

    mapView.on("floor-change", (event) => {
        const id = event?.floor.id;
        if (!id) return;
        floorSelector.value = id;

        // Update the current floor container text
        const currentFloor = sortedFloors.find(f => f.id === id);
        if (currentFloor) {
            // Show the current floor container
            currentFloorContainer.classList.remove('hidden');
            currentFloorContainer.textContent = `Current Floor: ${currentFloor.name}`;

            setTimeout(() => {
                currentFloorContainer.classList.add('hidden');
            }, 3000);
        }
    }); 


    // -------------------NAVIGATION TOOL--------------------

    const navTool = document.createElement("div"); 
    navTool.id = "navTool";
    navTool.classList.add("navTool");
    
    const navToggleBtn = document.createElement("div"); 
    navToggleBtn.id = "navToggleBtn";
    navToggleBtn.classList.add("navToggleBtn");
    
    const plusSymbol = document.createElement("h1");
    plusSymbol.id = "plusSymbol";
    plusSymbol.innerHTML = "&#43;";
    navToggleBtn.appendChild(plusSymbol);

    const navTools = document.createElement("div"); 
    navTools.id = "navTools";
    navTools.classList.add("navTools");
    navTools.appendChild(navToggleBtn);


    const iconClassNames: string[] = ['&#11160;', '&#11161;', '&#11163;', '&#11162;'];

    // Create spans with anchor elements and icons
    for (let i = 0; i < iconClassNames.length; i++) {

        const spanElement: HTMLSpanElement = document.createElement("span");
        spanElement.classList.add("navTspan");
        spanElement.style.setProperty("--i", (i + 1).toString()); 

        const anchorElement: HTMLAnchorElement = document.createElement("a");
        spanElement.classList.add("navTa");

        const iconElement: HTMLElement = document.createElement("h1");
        iconElement.innerHTML = iconClassNames[i]; 
        iconElement.classList.add("navTi");
        iconElement.id = `icon${i + 1}`;

        anchorElement.appendChild(iconElement);
        spanElement.appendChild(anchorElement);
        navTools.appendChild(spanElement);
    }

    navTool.appendChild(navTools);
    document.body.appendChild(navTool);

    const navT: HTMLElement | null = document.querySelector(".navTool")!;
    const navTBtn: HTMLElement | null = navT?.querySelector(".navToggleBtn")!;

    navTBtn?.addEventListener("click", () => {
        navT?.classList.toggle("open");
    });

    const bearingRightIcon: HTMLElement | null = document.getElementById('icon1');
    const pitchUpIcon: HTMLElement | null = document.getElementById('icon2');    
    const pitchDownIcon: HTMLElement | null = document.getElementById('icon3');
    const bearingLeftIcon: HTMLElement | null = document.getElementById('icon4');


    // Add an event listener for navigation tools
    bearingLeftIcon?.addEventListener("click", () => {
        const transform: { bearing?: number } = {};
        transform.bearing = (mapView.Camera.bearing - 45) % 360;
        mapView.Camera.animate(transform); 
    })

    bearingRightIcon?.addEventListener("click", () => {
        const transform: { bearing?: number } = {};
        transform.bearing = (mapView.Camera.bearing + 45) % 360;
        mapView.Camera.animate(transform);
    })

    pitchDownIcon?.addEventListener("click", () => {
        const transform: { pitch?: number } = {};
        transform.pitch = mapView.Camera.pitch + 10;
        mapView.Camera.animate(transform); 
    })

    pitchUpIcon?.addEventListener("click", () => {
        const transform: { pitch?: number } = {};
        transform.pitch = mapView.Camera.pitch - 10;
        mapView.Camera.animate(transform);
    })


    // -------------------ZOOM IN & ZOOM OUT--------------------
    const zoomIO = document.createElement("div"); 
    zoomIO.id = "zoomIO";

    const zoomInIcon = document.createElement("h1");
    zoomInIcon.id = "zoomInIcon"
    zoomInIcon.innerHTML = "&#43;"; 
    zoomIO.appendChild(zoomInIcon);

    const zoomOutIcon = document.createElement("h1");
    zoomOutIcon.id = "zoomOutIcon"
    zoomOutIcon.innerHTML = "&#8722;"; 
    zoomIO.appendChild(zoomOutIcon);

    document.body.appendChild(zoomIO);

    const zoomIn: HTMLElement | null = document.getElementById('zoomInIcon');
    const zoomOut: HTMLElement | null = document.getElementById('zoomOutIcon');

    zoomIn?.addEventListener("click", () => {
        const transform: { zoomLevel?: number } = {};
        transform.zoomLevel = mapView.Camera.zoomLevel + 0.5;
        mapView.Camera.animate(transform); 
    })

    zoomOut?.addEventListener("click", () => {
        const transform: { zoomLevel?: number } = {};
        transform.zoomLevel = mapView.Camera.zoomLevel - 0.5;
        mapView.Camera.animate(transform); 
    })  

    const searchBar = document.createElement("div");
    searchBar.setAttribute("id", "search-bar");
    const searchContainer = document.createElement("div");
    searchContainer.setAttribute("id", "search-container");

    document.body.appendChild(searchBar);

    searchBar.innerHTML = "<img id='icon' src='./src/assets/icon1.png' />";
    searchBar.appendChild(searchContainer);
    const searchInput = document.createElement("input");
    searchInput.setAttribute("id", "search-input");
    searchInput.setAttribute("type", "text");
    searchInput.setAttribute("placeholder", "Enter arrival location");
    searchInput.setAttribute("autocomplete", "off");
    searchContainer.appendChild(searchInput);

    const searchButton = document.createElement("button");
    searchButton.innerHTML = "<img id='search-icon' src='./src/assets/search-icon.png' alt='Search' />";
    searchButton.setAttribute("id", "search-button");
    searchContainer.appendChild(searchButton);

    const searchDropdown = document.createElement("div");
    searchDropdown.setAttribute("id", "search-dropdown");
    document.body.appendChild(searchDropdown);

    searchInput.addEventListener("input", () => {
        const inputValue = searchInput.value.trim().toLowerCase();
        // Clear originInput if it exists (assuming originInput is defined somewhere)
        // originInput.value = "";
        searchDropdown.innerHTML = "";
        if (inputValue) {
            const matchingSpaces = mapData.getByType("space").filter((space) => space.name.toLowerCase().includes(inputValue));
            const displayCount = Math.min(matchingSpaces.length, 5);
            matchingSpaces.slice(0, displayCount).forEach((space) => {
                const dropdownItem = document.createElement("div");
                dropdownItem.classList.add("dropdown-item");
                dropdownItem.textContent = space.name;
                dropdownItem.addEventListener("click", () => {
                    searchInput.value = space.name;
                     destinationInput.value = space.name; 
                    searchDropdown.innerHTML = "";
                });
                searchDropdown.appendChild(dropdownItem);
            });
            if (matchingSpaces.length > 5) {
                const scrollableDropdown = document.createElement("div");
                scrollableDropdown.classList.add("scrollable-dropdown");
                matchingSpaces.slice(5).forEach((space) => {
                    const dropdownItem = document.createElement("div");
                    dropdownItem.classList.add("dropdown-item");
                    dropdownItem.textContent = space.name;
                    dropdownItem.addEventListener("click", () => {
                        searchInput.value = space.name;
                         destinationInput.value = space.name; 
                        searchDropdown.innerHTML = "";
                    });
                    scrollableDropdown.appendChild(dropdownItem);
                });
                searchDropdown.appendChild(scrollableDropdown);
            }
            if (matchingSpaces.length === 0) {
                const noResultsItem = document.createElement("div");
                noResultsItem.classList.add("dropdown-item");
                noResultsItem.textContent = "No results found";
                searchDropdown.appendChild(noResultsItem);
            }
            searchDropdown.classList.add("show-border");
        } else {
            searchDropdown.classList.remove("show-border");
        }
    });

    // Close the dropdown when clicking outside the search bar and dropdown
    document.addEventListener("click", (event) => {
        const target = event.target as Node; 
        if (!searchBar.contains(target) && !searchDropdown.contains(target)) {
            searchDropdown.innerHTML = "";
            searchDropdown.classList.remove("show-border");
        }
    });

    
/*
        // Function to get user's coordinates using Geolocation API
        function getUserCoordinates() {
            return new Promise<{ latitude: number; longitude: number } | null>((resolve) => {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        resolve({
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude,
                        });
                    },
                    () => {
                        resolve(null); // Return null if unable to get coordinates
                    }
                );
            });
        }*/  

        const loadDirection = document.createElement("div");
        loadDirection.setAttribute("id", "loadDirection");
        loadDirection.innerHTML = `
            <img id='load-icon' src='./src/assets/loader.png' alt='Loading...' />
            <p id="loading-text">Looking for direction</p>`;
        document.body.appendChild(loadDirection);
        loadDirection.style.display = 'none'; // Hide the loader initially

        function getUserCoordinates() {
            return new Promise<{ latitude: number; longitude: number } | null>((resolve) => {
                // Geographical boundary of the premises
                const premisesBoundary = {
                    latitudeMin: 14.58622, 
                    latitudeMax: 14.58831, 
                    longitudeMin: 120.98360,
                    longitudeMax: 120.98554 
                };
        
                // Check if the user's coordinates fall within the premises boundary
                const isInPremises = (latitude: number, longitude: number) => {
                    const withinLatitude = latitude >= premisesBoundary.latitudeMin && latitude <= premisesBoundary.latitudeMax;
                    const withinLongitude = longitude >= premisesBoundary.longitudeMin && longitude <= premisesBoundary.longitudeMax;
                    return withinLatitude && withinLongitude;
                };
        
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const { latitude, longitude } = position.coords;
        
                        // Debugging Purposes
                        console.log(`User's Coordinates: Latitude: ${latitude}, Longitude: ${longitude}`);
                        console.log(`Checking boundaries: 
                                    Latitude within bounds: ${latitude} >= ${premisesBoundary.latitudeMin} && ${latitude} <= ${premisesBoundary.latitudeMax}
                                    Longitude within bounds: ${longitude} >= ${premisesBoundary.longitudeMin} && ${longitude} <= ${premisesBoundary.longitudeMax}`);
                        
                        if (isInPremises(latitude, longitude)) {
                            console.log('User is inside the premises.');
                            resolve({ latitude, longitude });
                        } else {
                            console.log('User is outside the premises.');
                            resolve(null);
                        }
                    },
                    (error) => {
                        console.log('Unable to get coordinates:', error);
                        resolve(null);
                    }
                );
            });
        }
        
        

        // Create the popup container for coordinates retrieval failure
        const popupContainer = document.createElement('div');
        popupContainer.id = 'popup-container';
        popupContainer.classList.add('popup');
        popupContainer.style.display = 'none'; 

        const popupContent = document.createElement('div');
        popupContent.id = 'popup-content';
        popupContent.classList.add('popup-content');

        const message = document.createElement('p');
        message.textContent = "Can't retrieve your current coordinate";

        const okButton = document.createElement('button');
        okButton.id = 'ok-button';
        okButton.textContent = 'OK';

        popupContent.appendChild(message);
        popupContent.appendChild(okButton);

        popupContainer.appendChild(popupContent);

        document.body.appendChild(popupContainer);

        okButton.addEventListener('click', () => {
            openSidebar();
            popupContainer.style.display = 'none';
        });

        const floorPopupContainer = document.createElement('div');
        floorPopupContainer.id = 'floor-popup-container';
        floorPopupContainer.classList.add('popup');
        floorPopupContainer.style.display = 'none'; 

        const floorPopupContent = document.createElement('div');
        floorPopupContent.id = 'floor-popup-content';
        floorPopupContent.classList.add('popup-content');

        const floorMessage = document.createElement('p');
        floorMessage.textContent = "Enter your floor: ";

        const selectorCont = document.createElement('div');
        selectorCont.id = 'selector-cont';

        const floorSelector1 = document.createElement('select');
        floorSelector1.id = 'floor-selector';

        const sortedFloors1 = mapData.getByType("floor").sort((a, b) => a.name.localeCompare(b.name));
        sortedFloors1.forEach((floor) => {
            const option = document.createElement("option");
            option.text = floor.name;
            option.value = floor.id;
            floorSelector1.appendChild(option);
        });

        const floorSubmitButton = document.createElement('button');
        floorSubmitButton.id = 'floor-submit-button';
        floorSubmitButton.textContent = 'Submit';

        floorPopupContent.appendChild(floorMessage);
        selectorCont.appendChild(floorSelector1);
        selectorCont.appendChild(floorSubmitButton);
        floorPopupContent.appendChild(selectorCont);

        floorPopupContainer.appendChild(floorPopupContent);

        document.body.appendChild(floorPopupContainer);

        // Function to open the sidebar and display the direction panel
        function openSidebar() {
            const sidebar = document.getElementById("sidebar");
            if (sidebar) {
                sidebar.style.display = "block";
                const directionPanel = document.getElementById("direction-panel");
                if (directionPanel) {
                    directionPanel.style.display = "block";
                }
            }
        } 

        async function DrawDirections(departCoordinate: Coordinate, arrive: Space): Promise<boolean> { 
            loadDirection.style.display = 'flex'; // Show the loading screen
             // Clear previous directions
            mapView.Navigation.clear();

            const directions = await mapView.getDirections(departCoordinate, arrive);
            if (directions) {
                // Define the options to display arrows on the path
                const drawOptions = {
                    pathOptions: {
                        displayArrowsOnPath: true
                    }
                };

                // Draw the directions with the specified options
                mapView.Navigation.draw(directions, drawOptions); 

                // Calculate the bearing from the departure coordinate to the arrival coordinate
                const departLat = departCoordinate.latitude;
                const departLon = departCoordinate.longitude;
                const arriveLat = arrive.center.latitude;
                const arriveLon = arrive.center.longitude;

                const y = Math.sin(arriveLon - departLon) * Math.cos(arriveLat);
                const x = Math.cos(departLat) * Math.sin(arriveLat) - 
                        Math.sin(departLat) * Math.cos(arriveLat) * Math.cos(arriveLon - departLon);
                const bearing = (Math.atan2(y, x) * 180 / Math.PI + 360) % 360;  
              
                // Step 1: Zoom into the departure coordinates
                await mapView.Camera.animate(
                    { 
                        center: departCoordinate, 
                        zoomLevel: 20 
                    }, 
                    { duration: 1000 }
                );

                // Step 2: Adjust the bearing towards the arrival coordinates
                await mapView.Camera.animate(
                    { 
                        center: departCoordinate, 
                        bearing: bearing
                    }, 
                    { duration: 1000 } 
                    
                );
                 
        
                loadDirection.style.display = 'none'; 
                return true;

            } else {
                popupContainer.style.display = 'flex'; 
                console.log("No directions found"); 
                loadDirection.style.display = 'none'; 
                return false;
            }
        } 


        // Floor submission event listener
        floorSubmitButton.addEventListener('click', async () => {
            const selectedFloorId = floorSelector1.value;
            if (selectedFloorId) {
                const floor = mapData.getByType("floor").find(f => f.id === selectedFloorId);
                if (floor) {
                    mapView.setFloor(selectedFloorId);
                    floorPopupContainer.style.display = 'none'; 
        
                    const userCoordinates = await getUserCoordinates();
                    if (!userCoordinates) {
                        console.log("Unable to retrieve user's coordinates.");
                        popupContainer.style.display = 'flex'; 
                        return;
                    }
        
                    const updatedDepartCoordinate = new Coordinate(userCoordinates.latitude, userCoordinates.longitude, selectedFloorId); 
                    //const updatedDepartCoordinate = new Coordinate(14.587003777840266, 120.98383199558646, selectedFloorId); 

        
                    const arrivalName = searchInput.value.trim();
                    const arrive = mapData.getByType("space").find((space) => space.name === arrivalName);
                    if (arrive) {
                        // Draw directions from the chosen floor level
                        const success = await DrawDirections(updatedDepartCoordinate, arrive);
                        if (success) {
                            // Add the searched arrival location and timestamp to the search history only if directions are generated
                            searchHistory.push({
                                origin: `${updatedDepartCoordinate.latitude}, ${updatedDepartCoordinate.longitude}`,
                                arrival: arrivalName,
                                timestamp: Date.now() 
                            });
                        }
                    } else {
                        console.log("Arrival location not found");
                    }
                } else {
                    console.log("Floor not found");
                }
            } else {
                console.log("Please select a floor");
            }
        });
        

        async function search() {
            const arrivalName = searchInput.value.trim();
            if (arrivalName) {
                // Hide searchDropdown
                searchDropdown.innerHTML = "";
                searchDropdown.classList.remove("show-border");
        
                loadDirection.style.display = 'flex';
        
                const userCoordinates = await getUserCoordinates();
                if (!userCoordinates) {
                    console.log("Unable to retrieve user's coordinates.");
 
                    loadDirection.style.display = 'none';
                    popupContainer.style.display = 'flex'; 
                    return;
                }
        
                loadDirection.style.display = 'none';
        
                // Show floor input popup before drawing directions
                floorPopupContainer.style.display = 'flex';
            } else {
                console.log("Please enter an arrival location");
            }
        }
        
        searchButton.addEventListener("click", async () => {
            search();
        });
        
        searchInput.addEventListener("keyup", async (event) => {
            if (event.key === "Enter") {
                search(); 
            }
        });
        


    //----------------------------SIDEBAR FUNCTION-------------------------------------

    function sidebar() {
        
        // Sidebar Div
        const sidebar = document.createElement("div");
        sidebar.id = "sidebar";
    
        // Sidebar Content
        const SBhead = document.createElement("div");
        SBhead.id = "SBhead";
        const SBimg1 = document.createElement("img");
        SBimg1.src = "./src/assets/icon1.png";
        const SBheadh1 = document.createElement("h1");
        SBheadh1.textContent = "Campus";
        const SBheadh11 = document.createElement("h1");
        SBheadh11.textContent = "Compass";
        SBimg1.id = "SBimg1";
        SBheadh1.id = "SBheadh1"
        SBheadh11.id = "SBheadh1"
        SBhead.appendChild(SBimg1);
        SBhead.appendChild(SBheadh1);
        SBhead.appendChild(SBheadh11);
    
        const SBdirec = document.createElement("div");
        SBdirec.id = "SBdirec";
        SBdirec.classList.add("sidebar-button");
        const SBimg2 = document.createElement("img");
        SBimg2.src = "./src/assets/directionIcon.png";
        const SBdirec1 = document.createElement("h1");
        SBdirec1.textContent = "Directions";
        SBimg2.id = "SBimg";
        SBdirec1.id = "SBh1"
        SBdirec.appendChild(SBimg2);
        SBdirec.appendChild(SBdirec1);
    
        const SBact = document.createElement("div");
        SBact.id = "SBact";
        SBact.classList.add("sidebar-button");
        const SBimg3 = document.createElement("img");
        SBimg3.src = "./src/assets/activityIcon.png";
        const SBacth1 = document.createElement("h1");
        SBacth1.textContent = "Activity";
        SBimg3.id = "SBimg3";
        SBacth1.id = "SBh1"
        SBact.appendChild(SBimg3);
        SBact.appendChild(SBacth1);
    
        const SBtup = document.createElement("div");
        SBtup.id = "SBtup";
        SBtup.classList.add("sidebar-button");
        const SBimg4 = document.createElement("img");
        SBimg4.src = "./src/assets/TUPIcon.png";
        const SBtuph1 = document.createElement("h1");
        SBtuph1.textContent = "TUP";
        SBimg4.id = "SBimg4";
        SBtuph1.id = "SBh1"
        SBtup.appendChild(SBimg4);
        SBtup.appendChild(SBtuph1);
    
        const SBdev = document.createElement("div");
        SBdev.id = "SBdev";
        SBdev.classList.add("sidebar-button");
        const SBimg5 = document.createElement("img");
        SBimg5.src = "./src/assets/devIcon.png";
        const SBdevh1 = document.createElement("h1");
        SBdevh1.textContent = "Developers";
        SBimg5.id = "SBimg";
        SBdevh1.id = "SBh1"
        SBdev.appendChild(SBimg5);
        SBdev.appendChild(SBdevh1);
    
        const SBabt = document.createElement("div");
        SBabt.id = "SBabt";
        SBabt.classList.add("sidebar-button");
        const SBimg6 = document.createElement("img");
        SBimg6.src = "./src/assets/aboutIcon.png";
        const SBabth1 = document.createElement("h1");
        SBabth1.textContent = "About";
        SBimg6.id = "SBimg6";
        SBabth1.id = "SBh1"
        SBabt.appendChild(SBimg6);
        SBabt.appendChild(SBabth1);
    
    
        // Append Divs or Buttons to sidebar
        sidebar.appendChild(SBhead);
        sidebar.appendChild(SBdirec);
        sidebar.appendChild(SBact);
        sidebar.appendChild(SBtup);
        sidebar.appendChild(SBdev);
        sidebar.appendChild(SBabt);
    
        // Append sidebar to body
        document.body.appendChild(sidebar);
        
        /*Collapse Button
        const collapseBtn = document.createElement("button"); 
        collapseBtn.id = "collapseBtn";
        const collapseSymbol = document.createElement("h1");
        collapseSymbol.id = "collapseSymbol"
        collapseSymbol.innerHTML = "&#129168;"; // Unicode symbol for left arrow
        collapseBtn.appendChild(collapseSymbol);
    
        collapseBtn.style.display = "none"; 
        document.body.appendChild(collapseBtn); 

        
        */  
       // Determine which panel to show based on the button clicked
       let panelContent = "";
       let panel: HTMLElement | null = null;  


        const directionPanel = document.createElement("div");
        directionPanel.classList.add("panel", "direction-panel");
        directionPanel.id = "direction-panel";

        const horizontalLine = document.createElement("hr");

        const SBsearchButton = document.createElement("button");
        SBsearchButton.innerHTML = "GET DIRECTIONS";
        SBsearchButton.setAttribute("id", "getdirect-button");

        // Create a text element before the input fields
        const directionText = document.createElement("div");
        directionText.textContent = "Directions";
        directionText.classList.add("text-before-inputs");
        directionPanel.appendChild(directionText);

        const searchContainer = document.createElement("div");
        searchContainer.classList.add("search-container");

        const wayfindIcon = document.createElement("img");
        wayfindIcon.src = "./src/assets/wayfindingIcon.png";
        wayfindIcon.id = "wayfindIcon";

        // Create a container for the input fields
        const inputContainer = document.createElement("div");
        inputContainer.classList.add("input-container");

        // Create input field for origin location
        originInput = document.createElement("input");
        originInput.setAttribute("type", "text");
        originInput.setAttribute("autocomplete", "off");
        originInput.setAttribute("placeholder", "Enter origin location");
        originInput.id = "depart-input";

        // Create input field for destination location
        destinationInput = document.createElement("input");
        destinationInput.setAttribute("type", "text");
        destinationInput.setAttribute("autocomplete", "off");
        destinationInput.setAttribute("placeholder", "Enter destination location");
        destinationInput.id = "destination-input";

        const horizontalLine1 = document.createElement("hr");
        
        // Create searchDropdown elements for origin and destination
        const originDropdown = document.createElement("div");
        const destinationDropdown = document.createElement("div");   

        // Attach event listener to originInput
        originInput.addEventListener("input", () => { 
            const inputValue = originInput.value.trim().toLowerCase();
            originDropdown.innerHTML = "";
            if (inputValue) {
                const matchingSpaces = mapData.getByType("space").filter((space) => space.name.toLowerCase().includes(inputValue));
                const displayCount = Math.min(matchingSpaces.length, 5);
                matchingSpaces.slice(0, displayCount).forEach((space) => {
                    const dropdownItem = document.createElement("div");
                    dropdownItem.classList.add("dropdown-item");
                    dropdownItem.textContent = space.name;
                    dropdownItem.addEventListener("click", () => {
                        originInput.value = space.name;
                        originDropdown.innerHTML = "";
                    });
                    originDropdown.appendChild(dropdownItem);
                });
                if (matchingSpaces.length > 5) {
                    const scrollableDropdown = document.createElement("div");
                    scrollableDropdown.classList.add("scrollable-dropdown");
                    matchingSpaces.slice(5).forEach((space) => {
                        const dropdownItem = document.createElement("div");
                        dropdownItem.classList.add("dropdown-item");
                        dropdownItem.textContent = space.name;
                        dropdownItem.addEventListener("click", () => {
                            originInput.value = space.name;
                            originDropdown.innerHTML = "";
                        });
                        scrollableDropdown.appendChild(dropdownItem);
                    });
                    originDropdown.appendChild(scrollableDropdown);
                }
                if (matchingSpaces.length === 0) {
                    const noResultsItem = document.createElement("div");
                    noResultsItem.classList.add("dropdown-item");
                    noResultsItem.textContent = "No results found";
                    originDropdown.appendChild(noResultsItem);
                }
                originDropdown.classList.add("show-border");
            } else {
                originDropdown.classList.remove("show-border");
            }
        });

        // Attach event listener to destinationInput
        destinationInput.addEventListener("input", () => { 
            const inputValue = destinationInput.value.trim().toLowerCase();
            destinationDropdown.innerHTML = "";
            if (inputValue) {
                const matchingSpaces = mapData.getByType("space").filter((space) => space.name.toLowerCase().includes(inputValue));
                const displayCount = Math.min(matchingSpaces.length, 5);
                matchingSpaces.slice(0, displayCount).forEach((space) => {
                    const dropdownItem = document.createElement("div");
                    dropdownItem.classList.add("dropdown-item");
                    dropdownItem.textContent = space.name;
                    dropdownItem.addEventListener("click", () => { 
                        destinationInput.value = space.name;
                        searchInput.value = space.name;
                        destinationDropdown.innerHTML = "";
                    });
                    destinationDropdown.appendChild(dropdownItem);
                });
                if (matchingSpaces.length > 5) {
                    const scrollableDropdown = document.createElement("div");
                    scrollableDropdown.classList.add("scrollable-dropdown");
                    matchingSpaces.slice(5).forEach((space) => {
                        const dropdownItem = document.createElement("div");
                        dropdownItem.classList.add("dropdown-item");
                        dropdownItem.textContent = space.name;
                        dropdownItem.addEventListener("click", () => {
                            destinationInput.value = space.name; 
                            searchInput.value = space.name;
                            destinationDropdown.innerHTML = "";
                        });
                        scrollableDropdown.appendChild(dropdownItem);
                    });
                    destinationDropdown.appendChild(scrollableDropdown);
                }
                if (matchingSpaces.length === 0) {
                    const noResultsItem = document.createElement("div");
                    noResultsItem.classList.add("dropdown-item");
                    noResultsItem.textContent = "No results found";
                    destinationDropdown.appendChild(noResultsItem);
                }
                destinationDropdown.classList.add("show-border");
            } else {
                destinationDropdown.classList.remove("show-border");
            }
        }); 

        getDirections(SBsearchButton, originInput, destinationInput);


        // Append input fields and content to the direction panel 
        directionPanel.appendChild(directionText);
        directionPanel.appendChild(horizontalLine);
        directionPanel.appendChild(searchContainer);
        searchContainer.appendChild(wayfindIcon)
        searchContainer.appendChild(inputContainer);
        inputContainer.appendChild(originInput);
        inputContainer.appendChild(destinationInput);
        directionPanel.appendChild(horizontalLine1);
        directionPanel.appendChild(SBsearchButton);
        directionPanel.appendChild(originDropdown);
        directionPanel.appendChild(destinationDropdown);
        
        
        // Append the direction panel to the sidebar
        sidebar.appendChild(directionPanel);

        let activeButton: HTMLElement | null = null; 
        let activePanel: HTMLElement | null = null; 
        
        // Event listeners to sidebar buttons
        const sidebarButtons = document.querySelectorAll(".sidebar-button");
        sidebarButtons.forEach(button => {
            button.addEventListener("click", function() {
                if (activeButton === button) {
                    if (activePanel) {
                        activePanel.style.display = "none";
                        //collapseBtn.style.display = "none"; 
                        if (activeButton) {
                            activeButton.classList.remove('active');
                            
                        }
                        activeButton = null;
                        activePanel = null;
                    }

                } else {
                    if (activeButton) { 
                        activeButton.classList.remove('active');
                    }
        
                    (button as HTMLElement).classList.add('active'); 
                    
                    activeButton = button as HTMLElement;  
                    
                    // Hide any previously shown panels
                    const panels = document.querySelectorAll(".panel");
                    panels.forEach((panel) => {
                        (panel as HTMLElement).style.display = "none";
                    });
        
                     
                    switch (button.id) {
                        case "SBdirec": 
                            // Show the panel associated with SBdirec
                            panel = document.getElementById("direction-panel");
                            if (panel) {
                                panel.style.display = "inline";
                            }
                            break;
                    
                            case "SBact":
                                panel = document.createElement("div");
                                panel.classList.add("panel");
                            
                                const historyText = document.createElement("div");
                                historyText.textContent = "History";
                                historyText.classList.add("text-before-inputs");
                                panel.appendChild(historyText);

                                const horizontalLine1 = document.createElement("hr");
                                panel.appendChild(horizontalLine1);

                                // Display search history
                                const historyList = document.createElement("ul");
                                historyList.classList.add("history-list");
                                searchHistory.forEach((entry) => {
                                    const listItem = document.createElement("li");
                                    listItem.classList.add("history-item");
                                    const timestamp = new Date(entry.timestamp);
                                    const options: Intl.DateTimeFormatOptions = {
                                        year: "numeric",
                                        month: "2-digit",
                                        day: "2-digit",
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        second: "2-digit",
                                        hour12: false,
                                        timeZone: "Asia/Manila" // Set the time zone to Philippine time
                                    };
                                    const formattedTimestamp = new Intl.DateTimeFormat("en-PH", options).format(timestamp);
                                    listItem.innerHTML = `<strong>Origin:</strong> ${entry.origin}<br><strong>Arrival:</strong> ${entry.arrival}<br><div style="text-align: right; font-style: italic;">${formattedTimestamp}</div>`;
                                    historyList.appendChild(listItem);
                                });
                                panel.appendChild(historyList);
                            
                                break;
                            
                            case "SBtup":
                            panel = document.createElement("div");
                            panel.classList.add("panel");
        
                            const tupText = document.createElement("div");
                            tupText.textContent = "Technological University of the Philippines - Manila";
                            tupText.classList.add("text-before-inputs");
                            panel.appendChild(tupText);

                            const horizontalLine2 = document.createElement("hr");
                            panel.appendChild(horizontalLine2);
        
                            const container = document.createElement("div");
                            container.classList.add("container");
        
                            const imageContainer = document.createElement("div");
                            imageContainer.classList.add("image-container");

                            // Library
                            
                            const libraryContainer = document.createElement("div");
                            libraryContainer.classList.add("picture-container", "hoverable");

                            // Create the first image (library)
                            const library = document.createElement("img");
                            library.src = "/src/assets/library.jpg";
                            library.alt = "Library-Image";
                            library.classList.add("clickable-image"); 

                            const libraryLabel = document.createElement("div");
                            libraryLabel.textContent = "Library";
                            libraryLabel.classList.add("image-label");
        
                            // Create text description element for the first image (library)
                            const description = document.createElement("div");
                            description.innerHTML = `The University Library at TUP-Manila supports academic, research, and extension programs. It provides resources and services to enrich students' educational experience, promote information literacy, and collaborate with stakeholders. By offering a wide range of materials, the library enhances access to information and contributes to curricular enrichment. Continuous evaluation ensures high standards of quality, aligning with the university's commitment to excellence.`;
                            description.classList.add("text-description");
                            description.style.display = "none"; 
        
                            // Add click event listener to the first image (library)
                            libraryContainer.addEventListener("click", () => {
                                description.style.display = description.style.display === "none" ? "block" : "none";
                                libraryContainer.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (libraryContainer.classList.contains("clicked")) { 
                                    libraryContainer.classList.remove("hoverable");
                                    libraryContainer.classList.add("original-size");
                                } else { 
                                    libraryContainer.classList.add("hoverable");
                                    libraryContainer.classList.remove("original-size");
                                }
                            });
        
                            // Append the first image and its description to the container
                            libraryContainer.appendChild(library);
                            libraryContainer.appendChild(libraryLabel);
                            container.appendChild(libraryContainer);
                            container.appendChild(description); 

                            // Museum
                            
                            const museumContainer = document.createElement("div");
                            museumContainer.classList.add("picture-container", "hoverable");

                            // Create the second image (museum)
                            const museum = document.createElement("img");
                            museum.src = "/src/assets/museum.jpg"; 
                            museum.alt = "Museum-Image";
                            museum.classList.add("clickable-image");   

                            const museumLabel = document.createElement("div");
                            museumLabel.textContent = "Museum";
                            museumLabel.classList.add("image-label");
        
                            // Create text description element for the second image
                            const description2 = document.createElement("div");
                            description2.innerHTML = `The TUP museum serves as a dynamic showcase for the artistic talents of our students, housing an impressive collection of their important works. This vibrant cultural hub highlights the creativity and innovation within our campus community, featuring rotating exhibitions of student-produced paintings, sculptures, multimedia projects, and more. In addition to celebrating student achievements, the museum offers educational programs and events that encourage artistic exploration and appreciation. By providing a dedicated space for the display and recognition of student art, the museum fosters a deeper connection to the university's creative spirit and inspires future generations of artists.`;
                            description2.classList.add("text-description");
                            description2.style.display = "none"; 
        
                            // Add click event listener to the second image
                            museumContainer.addEventListener("click", () => {
                                description2.style.display = description2.style.display === "none" ? "block" : "none";
                                museumContainer.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (museumContainer.classList.contains("clicked")) { 
                                    museumContainer.classList.remove("hoverable");
                                    museumContainer.classList.add("original-size");
                                } else { 
                                    museumContainer.classList.add("hoverable");
                                    museumContainer.classList.remove("original-size");
                                }
                            });
        
                            // Append the second image and its description to the container
                            museumContainer.appendChild(museum)
                            museumContainer.appendChild(museumLabel)
                            container.appendChild(museumContainer); 
                            container.appendChild(description2); 
        
                            // IRTC

                            const buildingContainer1 = document.createElement("div");
                            buildingContainer1.classList.add("picture-container", "hoverable");

                            const building1 = document.createElement("img");
                            building1.src = "/src/assets/irtc.jpg"; 
                            building1.alt = "IRTC-Image";
                            building1.classList.add("clickable-image");   

                            const buildingLabel1 = document.createElement("div");
                            buildingLabel1.textContent = "IRTC Building";
                            buildingLabel1.classList.add("image-label");
        
                            // Create text description element for the third image
                            const description3 = document.createElement("div");
                            description3.innerHTML = `The Integrated Research and Training Center (IRTC) building stands as a cornerstone of innovation and academic excellence on our campus, serving as a dynamic hub for research, training, and intellectual collaboration. With state-of-the-art facilities and versatile spaces, it provides a conducive environment for cutting-edge research projects and hands-on training initiatives across various disciplines. Additionally, the building features dedicated spaces for hosting programs, workshops, and seminars, fostering a culture of knowledge dissemination and academic discourse. Housing faculty offices and multipurpose rooms, the IRTC serves as a vibrant center for academic engagement and intellectual growth, enriching the educational experience of our university community.                            `;
                            description3.classList.add("text-description");
                            description3.style.display = "none"; 
        
                            // Add click event listener to the third image
                            buildingContainer1.addEventListener("click", () => {
                                description3.style.display = description3.style.display === "none" ? "block" : "none";
                                buildingContainer1.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (buildingContainer1.classList.contains("clicked")) { 
                                    buildingContainer1.classList.remove("hoverable");
                                    buildingContainer1.classList.add("original-size");
                                } else { 
                                    buildingContainer1.classList.add("hoverable");
                                    buildingContainer1.classList.remove("original-size");
                                }
                            });
        
                            // Append the third image and its description to the container
                            buildingContainer1.appendChild(building1)
                            buildingContainer1.appendChild(buildingLabel1)
                            container.appendChild(buildingContainer1);
                            container.appendChild(description3); 

                            // Covered Court

                            const buildingContainer2 = document.createElement("div");
                            buildingContainer2.classList.add("picture-container", "hoverable");

                            const building2 = document.createElement("img");
                            building2.src = "/src/assets/court.jpg"; 
                            building2.alt = "Court-Image";
                            building2.classList.add("clickable-image");   

                            const buildingLabel2 = document.createElement("div");
                            buildingLabel2.textContent = "Covered Court";
                            buildingLabel2.classList.add("image-label");
        
                            // Create text description element for the third image
                            const description4 = document.createElement("div");
                            description4.innerHTML = `The covered court stands as a dynamic centerpiece at the heart of our university campus, offering a versatile space for sports, events, and recreational activities. Adjacent to it, a stage adds further flexibility, facilitating performances, ceremonies, and cultural programs. This central location ensures easy access for students, faculty, and visitors alike, fostering a vibrant atmosphere of engagement and collaboration. Whether it's cheering on sports teams, attending concerts, or participating in community events, the covered court and adjacent stage serve as integral components of university life, promoting both physical wellness and a sense of belonging.`;
                            description4.classList.add("text-description");
                            description4.style.display = "none"; 
        
                            // Add click event listener to the third image
                            buildingContainer2.addEventListener("click", () => {
                                description4.style.display = description4.style.display === "none" ? "block" : "none";
                                buildingContainer2.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (buildingContainer2.classList.contains("clicked")) { 
                                    buildingContainer2.classList.remove("hoverable");
                                    buildingContainer2.classList.add("original-size");
                                } else { 
                                    buildingContainer2.classList.add("hoverable");
                                    buildingContainer2.classList.remove("original-size");
                                }
                            });
        
                            // Append the third image and its description to the container
                            buildingContainer2.appendChild(building2)
                            buildingContainer2.appendChild(buildingLabel2)
                            container.appendChild(buildingContainer2);
                            container.appendChild(description4); 

                            // Chapel

                            const buildingContainer3 = document.createElement("div");
                            buildingContainer3.classList.add("picture-container", "hoverable");

                            const building3 = document.createElement("img");
                            building3.src = "/src/assets/chapel.jpg"; 
                            building3.alt = "Chapel-Image";
                            building3.classList.add("clickable-image");   

                            const buildingLabel3 = document.createElement("div");
                            buildingLabel3.textContent = "Chapel";
                            buildingLabel3.classList.add("image-label");
        
                            // Create text description element for the third image
                            const description5 = document.createElement("div");
                            description5.innerHTML = `The university chapel, a serene and welcoming sanctuary within our campus, serves as a place for reflection, worship, and community gatherings. Located in between the CIE and CAFA buildings, it provides a peaceful environment for students, faculty, and staff to connect spiritually and find solace amidst their busy academic lives. The chapel hosts regular services, spiritual programs, and special events, fostering a sense of unity and support within the university community. Whether seeking a quiet moment of prayer or participating in group worship, the university chapel is a cherished space for all.`;
                            description5.classList.add("text-description");
                            description5.style.display = "none"; 
        
                            // Add click event listener to the third image
                            buildingContainer3.addEventListener("click", () => {
                                description5.style.display = description5.style.display === "none" ? "block" : "none";
                                buildingContainer3.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (buildingContainer3.classList.contains("clicked")) { 
                                    buildingContainer3.classList.remove("hoverable");
                                    buildingContainer3.classList.add("original-size");
                                } else { 
                                    buildingContainer3.classList.add("hoverable");
                                    buildingContainer3.classList.remove("original-size");
                                }
                            });
        
                            // Append the third image and its description to the container
                            buildingContainer3.appendChild(building3)
                            buildingContainer3.appendChild(buildingLabel3)
                            container.appendChild(buildingContainer3);
                            container.appendChild(description5);          

                            // COS

                            const buildingContainer4 = document.createElement("div");
                            buildingContainer4.classList.add("picture-container", "hoverable");

                            const building4 = document.createElement("img");
                            building4.src = "/src/assets/cos.jpg"; 
                            building4.alt = "cos-Image";
                            building4.classList.add("clickable-image");   

                            const buildingLabel4 = document.createElement("div");
                            buildingLabel4.textContent = "COS Building";
                            buildingLabel4.classList.add("image-label");
        
                            const description6 = document.createElement("div");
                            description6.innerHTML = `By Presidential Decree No. 1518, the Philippine College of Arts and Trades was converted into the Technological University of the Philippines (TUP) on June 11, 1976, leading to the establishment of six colleges, including the College of Arts and Sciences (CAS) in 1979. In 1991, CAS was tasked with dual roles as a service and science college. On July 24, 1995, the TUP Board of Regents transferred some Master Programs to CAS. Subsequently, CAS split into the College of Science and the College of Liberal Arts on September 15, 1995. The College of Science now offers graduate programs in Mathematics, Chemistry, Physics, and General Science, as well as five baccalaureate programs: Computer Science, Information Technology, Information Systems, Environmental Science, and Applied Science in Laboratory Technology. The building at Gate 2, which most students use to enter the university, houses the College of Science.`;
                            description6.classList.add("text-description");
                            description6.style.display = "none"; 
        
                            buildingContainer4.addEventListener("click", () => {
                                description6.style.display = description6.style.display === "none" ? "block" : "none";
                                buildingContainer4.classList.toggle("clicked");
        
                                if (buildingContainer4.classList.contains("clicked")) { 
                                    buildingContainer4.classList.remove("hoverable");
                                    buildingContainer4.classList.add("original-size");
                                } else { 
                                    buildingContainer4.classList.add("hoverable");
                                    buildingContainer4.classList.remove("original-size");
                                }
                            });
        
                            buildingContainer4.appendChild(building4)
                            buildingContainer4.appendChild(buildingLabel4)
                            container.appendChild(buildingContainer4);
                            container.appendChild(description6);  

                            // CLA
                            
                            const buildingContainer5 = document.createElement("div");
                            buildingContainer5.classList.add("picture-container", "hoverable");

                            const building5 = document.createElement("img");
                            building5.src = "/src/assets/cla.jpg"; 
                            building5.alt = "CLA-Image";
                            building5.classList.add("clickable-image");   

                            const buildingLabel5 = document.createElement("div");
                            buildingLabel5.textContent = "CLA Building";
                            buildingLabel5.classList.add("image-label");
        
                            const description7 = document.createElement("div");
                            description7.innerHTML = `The College of Liberal Arts (CLA) emerged as the counterpart to the College of Applied Arts and Sciences following their split. Initially a comprehensive service college, CLA underwent notable developments, including the approval by the Board of Regents in 1999 to introduce the Bachelor of Arts in Management majoring in Industrial Management. Presently, CLA comprises four departments: English, Filipino, Social Sciences, and Physical Education. Additionally, the college has recently expanded its offerings to include the Bachelor of Science in Entrepreneurial Management (BSEM).`;
                            description7.classList.add("text-description");
                            description7.style.display = "none"; 
        
                            buildingContainer5.addEventListener("click", () => {
                                description7.style.display = description7.style.display === "none" ? "block" : "none";
                                buildingContainer5.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (buildingContainer5.classList.contains("clicked")) { 
                                    buildingContainer5.classList.remove("hoverable");
                                    buildingContainer5.classList.add("original-size");
                                } else { 
                                    buildingContainer5.classList.add("hoverable");
                                    buildingContainer5.classList.remove("original-size");
                                }
                            });
        
                            // Append the third image and its description to the container
                            buildingContainer5.appendChild(building5)
                            buildingContainer5.appendChild(buildingLabel5)
                            container.appendChild(buildingContainer5);
                            container.appendChild(description7);  

                            //
                            
                            const buildingContainer6 = document.createElement("div");
                            buildingContainer6.classList.add("picture-container", "hoverable");

                            const building6 = document.createElement("img");
                            building6.src = "/src/assets/cie.jpg"; 
                            building6.alt = "CIE-Image";
                            building6.classList.add("clickable-image");   

                            const buildingLabel6 = document.createElement("div");
                            buildingLabel6.textContent = "CIE Building";
                            buildingLabel6.classList.add("image-label");
        
                            // Create text description element for the third image
                            const description8 = document.createElement("div");
                            description8.innerHTML = `The College of Industrial Education (CIE) traces its roots back to 1929 when the Philippine School of Arts and Trades first offered a two-year Industrial Teacher Education program. Established as the foundation of teacher education at the university, CIE has offered a four-year BS in Industrial Education program since 1951, preparing teachers for elementary and secondary levels. Today, CIE consists of four departments: Professional Industrial Education, Student Teaching, Technical Arts, and Home Economics.`;
                            description8.classList.add("text-description");
                            description8.style.display = "none"; 
        
                            // Add click event listener to the third image
                            buildingContainer6.addEventListener("click", () => {
                                description8.style.display = description8.style.display === "none" ? "block" : "none";
                                buildingContainer6.classList.toggle("clicked");
        
                                // Check if the image is clicked
                                if (buildingContainer6.classList.contains("clicked")) { 
                                    buildingContainer6.classList.remove("hoverable");
                                    buildingContainer6.classList.add("original-size");
                                } else { 
                                    buildingContainer6.classList.add("hoverable");
                                    buildingContainer6.classList.remove("original-size");
                                }
                            });
        
                            // Append the third image and its description to the container
                            buildingContainer6.appendChild(building6)
                            buildingContainer6.appendChild(buildingLabel6)
                            container.appendChild(buildingContainer6);
                            container.appendChild(description8);  

                            // CIT
                            
                            const buildingContainer7 = document.createElement("div");
                            buildingContainer7.classList.add("picture-container", "hoverable");

                            const building7 = document.createElement("img");
                            building7.src = "/src/assets/cit.jpg"; 
                            building7.alt = "CIT-Image";
                            building7.classList.add("clickable-image");   

                            const buildingLabel7 = document.createElement("div");
                            buildingLabel7.textContent = "CIT Building";
                            buildingLabel7.classList.add("image-label");
        
                            const description9 = document.createElement("div");
                            description9.innerHTML = `The College of Industrial Technology (CIT) has evolved from the Technical Department of the Philippine School of Arts and Trades, established in 1937, which later transformed into the Philippine College of Arts and Trades. With the conversion of the latter into the Technological University of the Philippines (TUP) in 1978, the CIT emerged from its departments. Today, the CIT stands as the focal point for industrial technology education within the university, comprising eight departments: Basic Industrial Technology, Civil Engineering Technology, Electrical Engineering Technology, Electronics Engineering Technology, Food and Apparel Technology, Graphic Arts and Printing Technology, Mechanical Engineering Technology, and Power Plant Engineering Technology.`;
                            description9.classList.add("text-description");
                            description9.style.display = "none"; 
        
                            buildingContainer7.addEventListener("click", () => {
                                description9.style.display = description9.style.display === "none" ? "block" : "none";
                                buildingContainer7.classList.toggle("clicked");
        
                                if (buildingContainer7.classList.contains("clicked")) { 
                                    buildingContainer7.classList.remove("hoverable");
                                    buildingContainer7.classList.add("original-size");
                                } else { 
                                    buildingContainer7.classList.add("hoverable");
                                    buildingContainer7.classList.remove("original-size");
                                }
                            });
        
                            buildingContainer7.appendChild(building7)
                            buildingContainer7.appendChild(buildingLabel7)
                            container.appendChild(buildingContainer7);
                            container.appendChild(description9);  

                            // CAFA
                            
                            const buildingContainer8 = document.createElement("div");
                            buildingContainer8.classList.add("picture-container", "hoverable");

                            const building8 = document.createElement("img");
                            building8.src = "/src/assets/cafa.jpg"; 
                            building8.alt = "CAFA-Image";
                            building8.classList.add("clickable-image");   

                            const buildingLabel8 = document.createElement("div");
                            buildingLabel8.textContent = "CAFA Building";
                            buildingLabel8.classList.add("image-label");
        
                            const description10 = document.createElement("div");
                            description10.innerHTML = `The origins of the College of Architecture and Fine Arts (CAFA) can be traced back to the inclusion of drawing subjects in all courses offered by the University since 1907. Over the years, CAFA has consistently contributed to the University's success and recognition in various art competitions, both locally and internationally. Additionally, CAFA has produced top performers in the Licensure Examination administered by the Professional Regulations Commission. Currently, the college comprises three departments: Architecture, Fine Arts, and Graphics. Moreover, CAFA offers advanced studies through its Graduate Programs, including the Master in Architecture (Major in Construction Technology Management) and the Master in Graphics Technology.`;
                            description10.classList.add("text-description");
                            description10.style.display = "none"; 
        
                            buildingContainer8.addEventListener("click", () => {
                                description10.style.display = description10.style.display === "none" ? "block" : "none";
                                buildingContainer8.classList.toggle("clicked");
        
                                if (buildingContainer8.classList.contains("clicked")) { 
                                    buildingContainer8.classList.remove("hoverable");
                                    buildingContainer8.classList.add("original-size");
                                } else { 
                                    buildingContainer8.classList.add("hoverable");
                                    buildingContainer8.classList.remove("original-size");
                                }
                            });
        
                            buildingContainer8.appendChild(building8)
                            buildingContainer8.appendChild(buildingLabel8)
                            container.appendChild(buildingContainer8);
                            container.appendChild(description10);  

                            // COE
                            
                            const buildingContainer9 = document.createElement("div");
                            buildingContainer9.classList.add("picture-container", "hoverable");

                            const building9 = document.createElement("img");
                            building9.src = "/src/assets/coe.jpg"; 
                            building9.alt = "COE-Image";
                            building9.classList.add("clickable-image");   

                            const buildingLabel9 = document.createElement("div");
                            buildingLabel9.textContent = "COE Building";
                            buildingLabel9.classList.add("image-label");
        
                            const description11 = document.createElement("div");
                            description11.innerHTML = `The College of Engineering (COE) has been granted Center of Development (COD) status by the Commission on Higher Education (CHED). Known for its commitment to excellence, COE is dedicated to producing highly skilled engineers, fostering the development of graduate professionals, and conducting valuable technology research for the benefit of both industry and society, with a keen focus on contributing to the advancement of national development.`;
                            description11.classList.add("text-description");
                            description11.style.display = "none"; 
        
                            buildingContainer9.addEventListener("click", () => {
                                description11.style.display = description11.style.display === "none" ? "block" : "none";
                                buildingContainer9.classList.toggle("clicked");
        
                                if (buildingContainer9.classList.contains("clicked")) { 
                                    buildingContainer9.classList.remove("hoverable");
                                    buildingContainer9.classList.add("original-size");
                                } else { 
                                    buildingContainer9.classList.add("hoverable");
                                    buildingContainer9.classList.remove("original-size");
                                }
                            });
        
                            buildingContainer9.appendChild(building9)
                            buildingContainer9.appendChild(buildingLabel9)
                            container.appendChild(buildingContainer9);
                            container.appendChild(description11);  

                            // Admin
                            
                            const buildingContainer10 = document.createElement("div");
                            buildingContainer10.classList.add("picture-container", "hoverable");

                            const building10 = document.createElement("img");
                            building10.src = "/src/assets/admin.jpg"; 
                            building10.alt = "Admin-Image";
                            building10.classList.add("clickable-image");   

                            const buildingLabel10 = document.createElement("div");
                            buildingLabel10.textContent = "Administration";
                            buildingLabel10.classList.add("image-label");
        
                            const description12 = document.createElement("div");
                            description12.innerHTML = `The Administration Building, situated at the heart of our campus, serves as the operational hub of our university, housing administrative offices and providing essential services to students and staff. Inside it is a convenient cashier window facilitates financial transactions, including tuition payments and fee processing, streamlining the student experience. This arrangement ensures efficient access to vital administrative functions, supporting the academic journey of our university community.`;
                            description12.classList.add("text-description");
                            description12.style.display = "none"; 
        
                            buildingContainer10.addEventListener("click", () => {
                                description12.style.display = description12.style.display === "none" ? "block" : "none";
                                buildingContainer10.classList.toggle("clicked");
        
                                if (buildingContainer10.classList.contains("clicked")) { 
                                    buildingContainer10.classList.remove("hoverable");
                                    buildingContainer10.classList.add("original-size");
                                } else { 
                                    buildingContainer10.classList.add("hoverable");
                                    buildingContainer10.classList.remove("original-size");
                                }
                            });
        
                            buildingContainer10.appendChild(building10)
                            buildingContainer10.appendChild(buildingLabel10)
                            container.appendChild(buildingContainer10);
                            container.appendChild(description12);  

                            // TPGA
                            
                            const buildingContainer11 = document.createElement("div");
                            buildingContainer11.classList.add("picture-container", "hoverable");

                            const building11 = document.createElement("img");
                            building11.src = "/src/assets/gapt.jpg"; 
                            building11.alt = "GAPT-Image";
                            building11.classList.add("clickable-image");   

                            const buildingLabel11 = document.createElement("div");
                            buildingLabel11.textContent = "Tomas Pinpin Graphic Arts Building";
                            buildingLabel11.classList.add("image-label");
        
                            const description13 = document.createElement("div");
                            description13.innerHTML = `The Tomas Pinpin Graphic Arts Building, shared by the College of Industrial Technology, stands as a beacon of creativity and innovation on our campus. Named after the esteemed Filipino printer Thomas Pinpin, it houses state-of-the-art facilities for graphic design, multimedia production, and digital arts. Through hands-on training and access to cutting-edge equipment, students delve into various techniques and mediums, guided by experienced faculty. Beyond its role in education, the building serves as a hub for artistic expression and collaboration, hosting exhibitions and industry events that showcase the talent of our students and faculty. As a cornerstone of the College of Industrial Technology, it not only prepares students for careers in graphic arts but also fosters a culture of creativity and excellence within our university community.`;
                            description13.classList.add("text-description");
                            description13.style.display = "none"; 
        
                            buildingContainer11.addEventListener("click", () => {
                                description13.style.display = description13.style.display === "none" ? "block" : "none";
                                buildingContainer11.classList.toggle("clicked");
        
                                if (buildingContainer11.classList.contains("clicked")) { 
                                    buildingContainer11.classList.remove("hoverable");
                                    buildingContainer11.classList.add("original-size");
                                } else { 
                                    buildingContainer11.classList.add("hoverable");
                                    buildingContainer11.classList.remove("original-size");
                                }
                            });
        
                            buildingContainer11.appendChild(building11)
                            buildingContainer11.appendChild(buildingLabel11)
                            container.appendChild(buildingContainer11);
                            container.appendChild(description13);  

                            panel.appendChild(container);
                        break;
                        
                        case "SBdev":
                            panel = document.createElement("div");
                            panel.classList.add("panel");  

                            const devText = document.createElement("div");
                            devText.textContent = "Developers";
                            devText.classList.add("text-before-inputs");
                            panel.appendChild(devText);  
                            
                            const horizontalLine3 = document.createElement("hr");
                            panel.appendChild(horizontalLine3);

                            const dev1 = document.createElement("div");
                            dev1.classList.add("dev")
                            panel.appendChild(dev1);

                            const ernest = document.createElement("img");
                            ernest.src = "./src/assets/ernest.jpg";
                            ernest.alt = "Developer Team"; 
                            ernest.classList.add("devImages");
                            dev1.appendChild(ernest);   
                            
                            const devtext1 = document.createElement("div");
                            devtext1.classList.add("devt")
                            dev1.appendChild(devtext1);

                            const ernestText = document.createElement("div");
                            ernestText.textContent = "Ernest Sean Aguilar";
                            ernestText.classList.add("devText");
                            devtext1.appendChild(ernestText);
                            
                            const ernestEmail = document.createElement("div");
                            ernestEmail.textContent = "ernestsean.aguilar@tup.edu.ph"
                            ernestEmail.classList.add("devEmai");
                            devtext1.appendChild(ernestEmail);
                            
                            const dev2 = document.createElement("div");
                            dev2.classList.add("dev")
                            panel.appendChild(dev2);

                            const ericka = document.createElement("img");
                            ericka.src = "./src/assets/ericka.jpg";
                            ericka.alt = "Developer Team"; 
                            ericka.classList.add("devImages");
                            dev2.appendChild(ericka); 
                            
                            const devtext2 = document.createElement("div");
                            devtext2.classList.add("devt")
                            dev2.appendChild(devtext2);

                            const erickaText = document.createElement("div");
                            erickaText.textContent = "Ericka Joy Formanes";
                            erickaText.classList.add("devText");
                            devtext2.appendChild(erickaText);

                            const erickaEmail = document.createElement("div");
                            erickaEmail.textContent = "erickajoy.formanes@tup.edu.ph"
                            erickaEmail.classList.add("devEmai");
                            devtext2.appendChild(erickaEmail);
                            
                            const dev3 = document.createElement("div");
                            dev3.classList.add("dev")
                            panel.appendChild(dev3);

                            const grace = document.createElement("img");
                            grace.src = "./src/assets/grace.jpg";
                            grace.alt = "Developer Team"; 
                            grace.classList.add("devImages");
                            dev3.appendChild(grace); 
                            
                            const devtext3 = document.createElement("div");
                            devtext3.classList.add("devt")
                            dev3.appendChild(devtext3);

                            const graceText = document.createElement("div");
                            graceText.textContent = "Grace Anne Garchitorena";
                            graceText.classList.add("devText");
                            devtext3.appendChild(graceText);
                        
                            const graceEmail = document.createElement("div");
                            graceEmail.textContent = "graceanne.garchitorena@tup.edu.ph"
                            graceEmail.classList.add("devEmai");
                            devtext3.appendChild(graceEmail);
                            
                            const dev4 = document.createElement("div");
                            dev4.classList.add("dev")
                            panel.appendChild(dev4);

                            const nino = document.createElement("img");
                            nino.src = "./src/assets/nino.jpg";
                            nino.alt = "Developer Team"; 
                            nino.classList.add("devImages");
                            dev4.appendChild(nino); 
                            
                            const devtext4 = document.createElement("div");
                            devtext4.classList.add("devt")
                            dev4.appendChild(devtext4);

                            const ninoText = document.createElement("div");
                            ninoText.textContent = "Nino Angelo Manzanero";
                            ninoText.classList.add("devText");
                            devtext4.appendChild(ninoText);

                            const ninoEmail = document.createElement("div");
                            ninoEmail.textContent = "ninoangelo.manzanero@tup.edu.ph"
                            ninoEmail.classList.add("devEmai");
                            devtext4.appendChild(ninoEmail);
                            
                            const dev5 = document.createElement("div");
                            dev5.classList.add("dev")
                            panel.appendChild(dev5);

                            const paolo = document.createElement("img");
                            paolo.src = "./src/assets/paolo.jpg";
                            paolo.alt = "Developer Team"; 
                            paolo.classList.add("devImages");
                            dev5.appendChild(paolo);   

                            const devtext5 = document.createElement("div");
                            devtext5.classList.add("devt")
                            dev5.appendChild(devtext5);

                            const paoloText = document.createElement("div");
                            paoloText.textContent = "Paolo Santos";
                            paoloText.classList.add("devText");
                            devtext5.appendChild(paoloText);      

                            const paoloEmail = document.createElement("div");
                            paoloEmail.textContent = "paolo.santos@tup.edu.ph"
                            paoloEmail.classList.add("devEmai");
                            devtext5.appendChild(paoloEmail);

                            break; 
        
                        case "SBabt":
                            panel = document.createElement("div");
                            panel.classList.add("panel"); 
        
                            const aboutText = document.createElement("div");
                            aboutText.textContent = "About";
                            aboutText.classList.add("text-before-inputs");
                            panel.appendChild(aboutText); 

                            const horizontalLine5 = document.createElement("hr");
                            panel.appendChild(horizontalLine5);
        
                            const about = document.createElement("div");
                            about.classList.add("about");
                            panel.appendChild(about);

                            const aboutWelc = document.createElement("div");
                            aboutWelc.classList.add("aboutWelc");
                            aboutWelc.innerText = 'Welcome to Campus Compass!'
                            about.appendChild(aboutWelc);

                            // Create the video element
                            const video = document.createElement("video");
                            video.src = "./src/assets/map.mp4";
                            video.autoplay = true;  
                            video.loop = true; 
                            video.classList.add("about-video");
                            about.appendChild(video); 
        
                            const aboutDef = document.createElement("div");
                            aboutDef.innerText = `Our interactive map is designed to assist students, faculty, and visitors in navigating the Technological University of the Philippines Manila campus with ease. Our map provides a comprehensive solution for all your navigation needs, allowing you to easily search for specific locations and find the shortest routes between buildings.
        
                            Explore our map today and embark on a seamless journey through the heart of TUP.`;
        
                            aboutDef.classList.add("aboutDef");
        
                            about.appendChild(aboutDef);
         
                            break;
                    }
                    
                    if (panel) {
                        // Create the panel content
                        const panelText = document.createElement("p");
                        panelText.textContent = panelContent;
        
                        // Show the panel
                        panel.style.display = "block";
                        panel.appendChild(panelText)
                        document.body.appendChild(panel);
        
                        // Update activePanel and collapse button visibility
                        activePanel = panel;
                        //collapseBtn.style.display = "block";
                    }
                }
                
            });
            
        });
        /*
        // Event listener for collapse button
        collapseBtn.addEventListener("click", function() {
            if (activePanel) {
                activePanel.style.display = "none";
                collapseBtn.style.display = "none"; 
                if (activeButton) {
                    activeButton.classList.remove('active');
                }
            }
        });
        */
    
    }

    async function getDirections(SBsearchButton: HTMLElement, originInput: HTMLInputElement, destinationInput: HTMLInputElement) {
        SBsearchButton.addEventListener("click", async () => {
            const origin = originInput.value.trim();
            const destination = destinationInput.value.trim();
    
            if (origin && destination) {
                const originSpace = mapData.getByType("space").find((space) => space.name === origin);
                const destinationSpace = mapData.getByType("space").find((space) => space.name === destination);
    
                if (originSpace && destinationSpace) {
                    // Get directions between the two spaces
                    const directions = await mapView.getDirections(originSpace, destinationSpace);
    
                    if (directions) {
                        // Define the options to display arrows on the path
                        const drawOptions = {
                            pathOptions: {
                                displayArrowsOnPath: true
                            }
                        };
    
                        // Draw the directions with the specified options
                        mapView.Navigation.draw(directions, drawOptions);
    
                        // Calculate the bearing from the origin to the destination
                        const departCoordinate = originSpace.center;
                        const arriveCoordinate = destinationSpace.center;
    
                        const y = Math.sin(arriveCoordinate.longitude - departCoordinate.longitude) * Math.cos(arriveCoordinate.latitude);
                        const x = Math.cos(departCoordinate.latitude) * Math.sin(arriveCoordinate.latitude) - 
                                  Math.sin(departCoordinate.latitude) * Math.cos(arriveCoordinate.latitude) * Math.cos(arriveCoordinate.longitude - departCoordinate.longitude);
                        const bearing = (Math.atan2(y, x) * 180 / Math.PI + 360) % 360;
    
                        // Step 1: Zoom into the origin coordinates
                        await mapView.Camera.animate(
                            { 
                                center: departCoordinate, 
                                zoomLevel: 20 
                            }, 
                            { duration: 1000 }
                        );
    
                        // Step 2: Adjust the bearing towards the destination coordinates
                        await mapView.Camera.animate(
                            { 
                                center: departCoordinate, 
                                bearing: bearing
                            }, 
                            { duration: 1000 }
                        );
    
                        // Add the searched origin, destination, and timestamp to the search history
                        searchHistory.push({
                            origin: origin,
                            arrival: destination,
                            timestamp: Date.now() // Store the current timestamp
                        });
                    } else {
                        console.log("No directions found");
                    }
                } else {
                    console.log("Origin or destination not found");
                }
            } else {
                console.log("Please enter both origin and destination");
            }
        });
    }
    
    

    loadingScreen.remove();
    
    // Call sidebar function
    sidebar(); 

}
init();